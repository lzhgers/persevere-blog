/*
 Navicat Premium Data Transfer

 Source Server         : 118.89.125.143
 Source Server Type    : MySQL
 Source Server Version : 50740
 Source Host           : 118.89.125.143:3306
 Source Schema         : lzh-blog

 Target Server Type    : MySQL
 Target Server Version : 50740
 File Encoding         : 65001

 Date: 15/10/2023 15:16:58
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for README
-- ----------------------------
DROP TABLE IF EXISTS `README`;
CREATE TABLE `README`  (
  `id` int(11) NOT NULL,
  `Message` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `Bitcoin_Address` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of README
-- ----------------------------
INSERT INTO `README` VALUES (1, 'I have backed up all your databases. To recover them you must pay 0.0145 BTC (Bitcoin) to this address: 1KNsTnLPGGXM5YAqPXj1v8z2iFTzg5abdH . Backup List: eastern-zhejiang-basin, lzh-blog, virtul-animation-experiment. After your payment email me at sqlrecover918@onionmail.org with your server IP (118.89.125.143) and transaction ID and you will get a download link to your backup. Emails without transaction ID and server IP will be ignored. ', '1KNsTnLPGGXM5YAqPXj1v8z2iFTzg5abdH');

-- ----------------------------
-- Table structure for lzh_article
-- ----------------------------
DROP TABLE IF EXISTS `lzh_article`;
CREATE TABLE `lzh_article`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `title` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `html` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT 'html格式文章内容',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '文章内容',
  `summary` varchar(1024) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章摘要',
  `category_id` bigint(20) NULL DEFAULT NULL COMMENT '所属分类id',
  `thumbnail` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '缩略图',
  `is_top` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '是否置顶（0否，1是）',
  `status` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '1' COMMENT '状态（0已发布，1草稿，2下架）',
  `view_count` bigint(20) NULL DEFAULT 0 COMMENT '访问量',
  `collect_count` bigint(20) NULL DEFAULT 0 COMMENT '收藏数',
  `comment_count` bigint(20) UNSIGNED NULL DEFAULT 0 COMMENT '评论数',
  `liked_count` bigint(20) UNSIGNED NULL DEFAULT 0 COMMENT '点赞数',
  `is_comment` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '1' COMMENT '是否允许评论 0否, 1是',
  `create_by` bigint(20) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_createBy_status`(`status`, `create_by`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1663903522481082371 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '文章表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_article
-- ----------------------------
INSERT INTO `lzh_article` VALUES (1662430187142406145, '函数式编程——Stream流', '<h1><a id=\"Stream_0\"></a>函数式编程——Stream流</h1>\n<h2><a id=\"1Lambda_2\"></a>1.Lambda表达式</h2>\n<h3><a id=\"11__4\"></a>1.1 核心原则</h3>\n<blockquote>\n<p>可推导可省略</p>\n</blockquote>\n<h3><a id=\"12__8\"></a>1.2 基本格式</h3>\n<blockquote>\n<p>(参数列表) -&gt; {代码}</p>\n</blockquote>\n<h3><a id=\"13__12\"></a>1.3 示例</h3>\n<h4><a id=\"_14\"></a>例一</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.lzh.lamdba;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo01</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">//匿名内部类</span>\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;----------------&quot;</span>);\n            }\n        }).start();\n\n        <span class=\"hljs-comment\">//Lambda表达式</span>\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(()-&gt; {\n            System.out.println(<span class=\"hljs-string\">&quot;----------------&quot;</span>);\n        }).start();\n\n    }\n}\n</code></div></pre>\n<h4><a id=\"_38\"></a>例二</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo01</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-comment\">//匿名内部类</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> calculateNum(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntBinaryOperator</span>() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">applyAsInt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\n                <span class=\"hljs-keyword\">return</span> left + right;\n            }\n        });\n        System.out.println(i);\n\n        <span class=\"hljs-comment\">//Lambda表达式</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i1</span> <span class=\"hljs-operator\">=</span> calculateNum((<span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right) -&gt; {\n            <span class=\"hljs-keyword\">return</span> left + right;\n        });\n        System.out.println(i1);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calculateNum</span><span class=\"hljs-params\">(IntBinaryOperator operator)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20</span>;\n        <span class=\"hljs-keyword\">return</span> operator.applyAsInt(a, b);\n    }\n}\n</code></div></pre>\n<h4><a id=\"_68\"></a>例三</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo01</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-comment\">//匿名内部类</span>\n        printNum(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntPredicate</span>() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> {\n                <span class=\"hljs-keyword\">return</span> value % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>;\n            }\n        });\n\n        <span class=\"hljs-comment\">//Lambda表达式</span>\n        printNum((<span class=\"hljs-type\">int</span> value) -&gt; {\n            <span class=\"hljs-keyword\">return</span> value % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>;\n        });\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printNum</span><span class=\"hljs-params\">(IntPredicate predicate)</span> {\n        <span class=\"hljs-type\">int</span>[] arr = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>};\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : arr) {\n            <span class=\"hljs-keyword\">if</span> (predicate.test(i)) {\n                System.out.println(i);\n            }\n        }\n    }\n\n}\n</code></div></pre>\n<h4><a id=\"_100\"></a>例四</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo01</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">//匿名内部类</span>\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> typeConver(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>&lt;String, Integer&gt;() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">apply</span><span class=\"hljs-params\">(String s)</span> {\n                <span class=\"hljs-keyword\">return</span> Integer.valueOf(s);\n            }\n        });\n        System.out.println(result);\n\n        <span class=\"hljs-comment\">//Lambda表达式</span>\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">result1</span> <span class=\"hljs-operator\">=</span> typeConver((String s) -&gt; {\n            <span class=\"hljs-keyword\">return</span> Integer.valueOf(s);\n        });\n        System.out.println(result1);\n\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;R&gt; R <span class=\"hljs-title function_\">typeConver</span><span class=\"hljs-params\">(Function&lt;String, R&gt; function)</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;1235&quot;</span>;\n        <span class=\"hljs-type\">R</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> function.apply(str);\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n\n}\n</code></div></pre>\n<h4><a id=\"_131\"></a>例五</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo01</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">//匿名内部类</span>\n        foreachArr(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntConsumer</span>() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">accept</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> {\n                System.out.println(value);\n            }\n        });\n\n        <span class=\"hljs-comment\">//Lambda表达式</span>\n        foreachArr((<span class=\"hljs-type\">int</span> value)-&gt;{\n            System.out.println(value);\n        });\n        \n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">foreachArr</span><span class=\"hljs-params\">(IntConsumer consumer)</span> {\n        <span class=\"hljs-type\">int</span>[] arr = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>};\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : arr) {\n            consumer.accept(i);\n        }\n    }\n}\n</code></div></pre>\n<h3><a id=\"14__160\"></a>1.4 省略规则</h3>\n<ul>\n<li>参数类型可以省略</li>\n<li>方法体只有一句代码时，大括号、return和唯一一句代码的分号可以省略</li>\n<li>方法只有一个参数时小括号可以省略</li>\n</ul>\n<h2><a id=\"2Stream_166\"></a>2.Stream流</h2>\n<h3><a id=\"21__168\"></a>2.1 概述</h3>\n<blockquote>\n<p>Java8的Stream使用的是函数式编程模式，如同他的名字一样，它可以被用来对集合或数组进行链状流式的操作。可以方便的让我们对集合或数组操作。</p>\n</blockquote>\n<h3><a id=\"22__172\"></a>2.2 案例数据准备</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@NoArgsConstructor</span>\n<span class=\"hljs-meta\">@AllArgsConstructor</span>\n<span class=\"hljs-meta\">@EqualsAndHashCode</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Author</span> {\n\n    <span class=\"hljs-keyword\">private</span> Long id;\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> Integer age;\n    <span class=\"hljs-keyword\">private</span> String intro;\n    <span class=\"hljs-keyword\">private</span> List&lt;Book&gt; books;\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@NoArgsConstructor</span>\n<span class=\"hljs-meta\">@AllArgsConstructor</span>\n<span class=\"hljs-meta\">@EqualsAndHashCode</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Book</span> {\n\n    <span class=\"hljs-keyword\">private</span> Long id;\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> String category;\n    <span class=\"hljs-keyword\">private</span> Integer score;\n    <span class=\"hljs-keyword\">private</span> String intro;\n\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Author&gt; <span class=\"hljs-title function_\">getAuthors</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">//数据初始化</span>\n    <span class=\"hljs-type\">Author</span> <span class=\"hljs-variable\">author</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Author</span>(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-string\">&quot;aa&quot;</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-string\">&quot;aaaa&quot;</span>, <span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-type\">Author</span> <span class=\"hljs-variable\">author2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Author</span>(<span class=\"hljs-number\">2L</span>, <span class=\"hljs-string\">&quot;bb&quot;</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-string\">&quot;bbbb&quot;</span>, <span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-type\">Author</span> <span class=\"hljs-variable\">author3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Author</span>(<span class=\"hljs-number\">3L</span>, <span class=\"hljs-string\">&quot;cc&quot;</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-string\">&quot;cccc&quot;</span>, <span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-type\">Author</span> <span class=\"hljs-variable\">author4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Author</span>(<span class=\"hljs-number\">4L</span>, <span class=\"hljs-string\">&quot;dd&quot;</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-string\">&quot;dddd&quot;</span>, <span class=\"hljs-literal\">null</span>);\n\n    <span class=\"hljs-comment\">//书籍列表</span>\n    List&lt;Book&gt; books1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    List&lt;Book&gt; books2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    List&lt;Book&gt; books3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n\n    books1.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-string\">&quot;爱情&quot;</span>, <span class=\"hljs-string\">&quot;哲学&quot;</span>, <span class=\"hljs-number\">88</span>, <span class=\"hljs-string\">&quot;一个我&quot;</span>));\n    books1.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(<span class=\"hljs-number\">2L</span>, <span class=\"hljs-string\">&quot;理论&quot;</span>, <span class=\"hljs-string\">&quot;成长&quot;</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-string\">&quot;真理&quot;</span>));\n\n    books2.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-string\">&quot;爱情2&quot;</span>, <span class=\"hljs-string\">&quot;哲学&quot;</span>, <span class=\"hljs-number\">88</span>, <span class=\"hljs-string\">&quot;一个我&quot;</span>));\n    books2.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(<span class=\"hljs-number\">2L</span>, <span class=\"hljs-string\">&quot;理论2&quot;</span>, <span class=\"hljs-string\">&quot;成长&quot;</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-string\">&quot;真理&quot;</span>));\n    books2.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(<span class=\"hljs-number\">2L</span>, <span class=\"hljs-string\">&quot;理论2&quot;</span>, <span class=\"hljs-string\">&quot;成长&quot;</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-string\">&quot;真理&quot;</span>));\n\n    books3.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-string\">&quot;爱情3&quot;</span>, <span class=\"hljs-string\">&quot;哲学&quot;</span>, <span class=\"hljs-number\">88</span>, <span class=\"hljs-string\">&quot;一个我&quot;</span>));\n    books3.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(<span class=\"hljs-number\">2L</span>, <span class=\"hljs-string\">&quot;理论3&quot;</span>, <span class=\"hljs-string\">&quot;成长&quot;</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-string\">&quot;真理&quot;</span>));\n    books3.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(<span class=\"hljs-number\">2L</span>, <span class=\"hljs-string\">&quot;理论3&quot;</span>, <span class=\"hljs-string\">&quot;成长&quot;</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-string\">&quot;真理&quot;</span>));\n\n    author.setBooks(books1);\n    author2.setBooks(books2);\n    author3.setBooks(books3);\n    author4.setBooks(books3);\n\n    List&lt;Author&gt; authorList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(author, author2, author3, author4));\n    <span class=\"hljs-keyword\">return</span> authorList;\n}\n</code></div></pre>\n<h3><a id=\"23__239\"></a>2.3 快速入门</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authorList = getAuthors();\n    <span class=\"hljs-comment\">//打印所有年龄小于18的作家的名字，并且要注意去重</span>\n    authorList.stream() <span class=\"hljs-comment\">//把集合转换成流</span>\n            .distinct() <span class=\"hljs-comment\">//去重</span>\n            .filter(author -&gt; author.getAge() &lt; <span class=\"hljs-number\">18</span>) <span class=\"hljs-comment\">//过滤</span>\n            .forEach(author -&gt; System.out.println(author.getName())); <span class=\"hljs-comment\">//遍历</span>\n\n}\n</code></div></pre>\n<h3><a id=\"24__253\"></a>2.4 常用操作</h3>\n<h4><a id=\"241__255\"></a>2.4.1 创建流</h4>\n<p>单列集合：<code>集合对象.stream()</code></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">List&lt;Author&gt; authorList = getAuthors();\nStream&lt;Author&gt; stream = authorList.stream();\n</code></div></pre>\n<p>数组：<code>Arrays.stream(数组)</code>或者使用<code>Stream.of()</code>来创建</p>\n<pre><code class=\"lang-\">Integer[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nStream&lt;Integer&gt; stream = Arrays.stream(arr);\nStream&lt;Integer&gt; stream1 = Stream.of(arr);\n</code></pre>\n<p>双列集合：转换成单列集合后再创建</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    Map&lt;String, Integer&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n    map.put(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">1</span>);\n    map.put(<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">2</span>);\n    Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entrySet = map.entrySet();\n    Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; stream = entrySet.stream();\n    stream.filter(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Predicate</span>&lt;Map.Entry&lt;String, Integer&gt;&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(Map.Entry&lt;String, Integer&gt; entry)</span> {\n            <span class=\"hljs-keyword\">return</span> entry.getValue() &gt; <span class=\"hljs-number\">1</span>;\n        }\n    }).forEach(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Consumer</span>&lt;Map.Entry&lt;String, Integer&gt;&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">accept</span><span class=\"hljs-params\">(Map.Entry&lt;String, Integer&gt; entry)</span> {\n            System.out.println(entry.getKey() + <span class=\"hljs-string\">&quot;:&quot;</span> + entry.getValue());\n        }\n    });\n}\n</code></div></pre>\n<h4><a id=\"242__295\"></a>2.4.2 中间操作</h4>\n<h5><a id=\"filter_297\"></a>filter</h5>\n<blockquote>\n<p>可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中。</p>\n</blockquote>\n<p>例如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-comment\">//打印所有姓名长度大于1的作家的姓名</span>\n    authors.stream()\n            .filter(author -&gt; author.getName().length() &gt; <span class=\"hljs-number\">2</span>)\n            .forEach(author -&gt; System.out.println(author.getName()));\n}\n</code></div></pre>\n<h5><a id=\"map_314\"></a>map</h5>\n<blockquote>\n<p>可以把对流中的元素进行计算或转换。</p>\n</blockquote>\n<p>例如：</p>\n<ul>\n<li><strong>转换</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-comment\">//打印所有作家的姓名</span>\n    authors.stream()\n            .map(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>&lt;Author, String&gt;() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">apply</span><span class=\"hljs-params\">(Author author)</span> {\n                    <span class=\"hljs-keyword\">return</span> author.getName();\n                }\n            })\n            .forEach(name -&gt; System.out.println(name));\n    \n    authors.stream()\n            .map(author -&gt; author.getName())\n            .forEach(name -&gt; System.out.println(name));\n\n}\n</code></div></pre>\n<ul>\n<li>计算</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    authors.stream()\n            .map(author -&gt; author.getAge())\n            .map(age -&gt; age + <span class=\"hljs-number\">10</span>)\n            .forEach(age -&gt; System.out.println(age));   \n}\n</code></div></pre>\n<h5><a id=\"distinct_358\"></a>distinct</h5>\n<blockquote>\n<p>可以去除流中的重复元素</p>\n</blockquote>\n<p><code>注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要重写equals方法。</code></p>\n<p>例如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    authors.stream()\n            .distinct()\n            .forEach(author -&gt; System.out.println(author.getName()));\n\n}\n</code></div></pre>\n<h5><a id=\"sorted_381\"></a>sorted</h5>\n<blockquote>\n<p>可以对流中的元素进行排序。</p>\n</blockquote>\n<p>例如：</p>\n<ul>\n<li>\n<p>调用空参sorted方法，需要流中的元素实现Comparable接口</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@NoArgsConstructor</span>\n<span class=\"hljs-meta\">@AllArgsConstructor</span>\n<span class=\"hljs-meta\">@EqualsAndHashCode</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Author</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Author&gt; {\n\n    <span class=\"hljs-keyword\">private</span> Long id;\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> Integer age;\n    <span class=\"hljs-keyword\">private</span> String intro;\n    <span class=\"hljs-keyword\">private</span> List&lt;Book&gt; books;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(Author o)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.getAge() - o.getAge();\n    }\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-comment\">//对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素</span>\n    authors.stream()\n            .distinct()\n            .sorted()\n            .forEach(author -&gt; System.out.println(author.getAge()));\n}\n</code></div></pre>\n</li>\n<li>\n<p>有参sorted方法</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-comment\">//对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素</span>\n    authors.stream()\n        .distinct()\n        .sorted(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Author&gt;() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Author o1, Author o2)</span> {\n                <span class=\"hljs-keyword\">return</span> o1.getAge() - o2.getAge();\n            }\n        })\n        .forEach(author -&gt; System.out.println(author.getAge()));\n\n    authors.stream()\n        .distinct()\n        .sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())\n        .forEach(author -&gt; System.out.println(author.getAge()));\n}\n</code></div></pre>\n</li>\n</ul>\n<h5><a id=\"limit_447\"></a>limit</h5>\n<blockquote>\n<p>可以设置流的最大长度，超出的部分将被抛弃。</p>\n</blockquote>\n<p>例如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-comment\">//对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素，然后打印其中年龄最大的两个作家的姓名</span>\n    authors.stream()\n        .distinct()\n        .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())\n        .limit(<span class=\"hljs-number\">2</span>)\n        .forEach(author -&gt; System.out.println(author.getName()));\n\n}\n</code></div></pre>\n<h5><a id=\"skip_469\"></a>skip</h5>\n<blockquote>\n<p>跳过流中的前n个元素，返回剩下的元素。</p>\n</blockquote>\n<p>例如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-comment\">//打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序</span>\n    authors.stream()\n        .distinct()\n        .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())\n        .skip(<span class=\"hljs-number\">1</span>)\n        .forEach(author -&gt; System.out.println(author.getAge()));\n\n}\n</code></div></pre>\n<h5><a id=\"flatMap_491\"></a>flatMap</h5>\n<blockquote>\n<p>map只能把一个对象转换成另一个对象来作为流中的元素，而flatMap可以把一个对象转换成多个对象作为流中的元素。</p>\n</blockquote>\n<p>例一：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-comment\">//打印所有书籍的名字，要求对重复的元素进行去重</span>\n    authors.stream()\n        .distinct()\n        .flatMap(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>&lt;Author, Stream&lt;Book&gt;&gt;() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> Stream&lt;Book&gt; <span class=\"hljs-title function_\">apply</span><span class=\"hljs-params\">(Author author)</span> {\n                <span class=\"hljs-keyword\">return</span> author.getBooks().stream();\n            }\n        })\n        .forEach(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Consumer</span>&lt;Book&gt;() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">accept</span><span class=\"hljs-params\">(Book book)</span> {\n                System.out.println(book);\n            }\n        });\n    \n    authors.stream()\n        .distinct()\n        .flatMap(author -&gt; author.getBooks().stream())\n        .forEach(book -&gt; System.out.println(book));\n}\n</code></div></pre>\n<p>例二：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-comment\">//打印现有数据的所有分类，要求对分类进行去重，不能出现这种：哲学，爱情</span>\n    authors.stream()\n        .flatMap(author -&gt; author.getBooks().stream())\n        .distinct()\n        .flatMap(book -&gt; Arrays.stream(book.getCategory().split(<span class=\"hljs-string\">&quot;，&quot;</span>)))\n        .distinct()\n        .forEach(category -&gt; System.out.println(category));\n\n}\n</code></div></pre>\n<h4><a id=\"243__543\"></a>2.4.3 终结操作</h4>\n<h5><a id=\"forEach_545\"></a>forEach</h5>\n<blockquote>\n<p>对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作</p>\n</blockquote>\n<p>例子：输出所有作家的名字</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    authors.stream()\n            .map(author -&gt; author.getName())\n            .forEach(name -&gt; System.out.println(name));   \n}\n</code></div></pre>\n<h5><a id=\"count_561\"></a>count</h5>\n<blockquote>\n<p>可以用来获取当前流中元素的个数。</p>\n</blockquote>\n<p>例子：打印这些作家的所出书籍的数目，注意删除重复元素</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> authors.stream()\n            .flatMap(author -&gt; author.getBooks().stream())\n            .distinct()\n            .count();\n    System.out.println(count);\n}\n</code></div></pre>\n<h5><a id=\"maxmin_579\"></a>max&amp;min</h5>\n<blockquote>\n<p>可以用来获取流中的最值</p>\n</blockquote>\n<p>例子：分别获取这些作家所出书籍的最高分和最低分并打印</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    Optional&lt;Integer&gt; max = authors.stream()\n            .flatMap(author -&gt; author.getBooks().stream())\n            .map(book -&gt; book.getScore())\n            .max((o1, o2) -&gt; o1 - o2);\n    System.out.println(max.get());\n\n\n    Optional&lt;Integer&gt; min = authors.stream()\n            .flatMap(author -&gt; author.getBooks().stream())\n            .map(book -&gt; book.getScore())\n            .min((o1, o2) -&gt; o1 - o2);\n    System.out.println(min.get());\n}\n</code></div></pre>\n<h5><a id=\"collect_604\"></a>collect</h5>\n<blockquote>\n<p>把当前流转换成一个集合</p>\n</blockquote>\n<p>例子：</p>\n<ul>\n<li>\n<p>获取一个存放所有作者名字的List集合</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    List&lt;String&gt; names = authors.stream()\n            .map(author -&gt; author.getName())\n            .collect(Collectors.toList());\n    System.out.println(names);   \n}\n</code></div></pre>\n</li>\n<li>\n<p>获取一个所有书名的Set集合</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    Set&lt;String&gt; books = authors.stream()\n            .flatMap(author -&gt; author.getBooks().stream())\n            .map(book -&gt; book.getName())\n            .collect(Collectors.toSet());\n\n    System.out.println(books);\n}\n</code></div></pre>\n</li>\n<li>\n<p>获取一个Map集合，map的key为作者名，value为List&lt;Book&gt;</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    Map&lt;String, List&lt;Book&gt;&gt; map = authors.stream()\n            .distinct()\n            .collect(Collectors.toMap(author -&gt; author.getName(), author -&gt; author.getBooks()));\n\n    System.out.println(map);\n}\n</code></div></pre>\n</li>\n</ul>\n<h5><a id=\"_652\"></a>查找与匹配</h5>\n<h6><a id=\"anyMatch_654\"></a>anyMatch</h6>\n<blockquote>\n<p>可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型</p>\n</blockquote>\n<p>例子：判断是否有年龄再29以上的作家</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> authors.stream()\n            .anyMatch(author -&gt; author.getAge() &gt; <span class=\"hljs-number\">29</span>);\n    System.out.println(b);\n\n}\n</code></div></pre>\n<h6><a id=\"allMatch_671\"></a>allMatch</h6>\n<blockquote>\n<p>可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则为false。</p>\n</blockquote>\n<p>例子：判断是否所有的作家都是成年人</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> authors.stream()\n            .allMatch(author -&gt; author.getAge() &gt;= <span class=\"hljs-number\">18</span>);\n    System.out.println(b);\n\n}\n</code></div></pre>\n<h6><a id=\"noneMatch_688\"></a>noneMatch</h6>\n<blockquote>\n<p>可以用来判断流中的元素是否都不符合匹配条件，结果为boolean类型。如果都不符合结果为true，否则为false。</p>\n</blockquote>\n<p>例子：判断作家是否都没有超过100岁的</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> authors.stream()\n            .noneMatch(author -&gt; author.getAge() &gt;= <span class=\"hljs-number\">100</span>);\n    System.out.println(b);\n\n}\n</code></div></pre>\n<h6><a id=\"findAny_705\"></a>findAny</h6>\n<blockquote>\n<p>获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素</p>\n</blockquote>\n<p>例子：获取任意一个年龄大于18的作家，如果存在就输出他的名字</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    Optional&lt;Author&gt; optionalAuthor = authors.stream()\n            .filter(author -&gt; author.getAge() &gt; <span class=\"hljs-number\">18</span>)\n            .findAny();\n    optionalAuthor.ifPresent(author -&gt; System.out.println(author.getName()));\n}\n</code></div></pre>\n<h6><a id=\"findFirst_722\"></a>findFirst</h6>\n<blockquote>\n<p>获取流中的第一个元素</p>\n</blockquote>\n<p>例子：获取一个年龄最小的作家，并输出他的姓名</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    Optional&lt;Author&gt; author = authors.stream()\n        .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())\n        .findFirst();\n    author.ifPresent(author1 -&gt; System.out.println(author1.getName()));\n}\n</code></div></pre>\n<h6><a id=\"reduce_739\"></a>reduce归并</h6>\n<blockquote>\n<p>对流中的数据按照你指定的计算方式计算出一个结果。（缩紧操作）</p>\n<p>reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始化值进行计算，计算结果再和后面的元素计算。</p>\n</blockquote>\n<p>reduce两个参数的重载形式内部的计算方式如下：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> identity;\n<span class=\"hljs-keyword\">for</span> (T element : <span class=\"hljs-built_in\">this</span>.stream) {\n    result = accumulator.apply(result, element)\n}\n<span class=\"hljs-keyword\">return</span> result;\n</code></div></pre>\n<p>其中identity就是我们可以通过方法参数传入的初始值，accumulator的apply具体进行什么计算也是我们通过方法参数来确定的。</p>\n<p>例子：</p>\n<ul>\n<li>\n<p>使用reduce求所有作者年龄的和</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> authors.stream()\n            .map(author -&gt; author.getAge())\n            .reduce(<span class=\"hljs-number\">0</span>, (result, element) -&gt; result + element);\n    System.out.println(sum);\n}\n</code></div></pre>\n</li>\n<li>\n<p>使用reduce求所有作者中年龄的最大值</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> authors.stream()\n            .map(author -&gt; author.getAge())\n            .reduce(Integer.MIN_VALUE, (result, element) -&gt; result &lt; element ? element : result);\n    System.out.println(max);\n}\n</code></div></pre>\n</li>\n<li>\n<p>使用reduce求所有作者中年龄的最小值</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> authors.stream()\n            .map(author -&gt; author.getAge())\n            .reduce(Integer.MAX_VALUE, (result, element) -&gt; result &gt; element ? element : result);\n    System.out.println(min);\n}\n</code></div></pre>\n</li>\n</ul>\n<p>reduce一个参数的重载形式内部的计算</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">foundAny</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">for</span> (T element : <span class=\"hljs-built_in\">this</span> stream){\n    <span class=\"hljs-keyword\">if</span> (!foundAny) {\n        foundAny = <span class=\"hljs-literal\">true</span>;\n        result = element;\n    } <span class=\"hljs-type\">else</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> accumulator.apply(result, element);\n}\n<span class=\"hljs-keyword\">return</span> foundAny ? Optional.of(result) : Optional.empty();\n</code></div></pre>\n<p>如果用一个参数的重载方法去求最小值，代码如下：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    Optional&lt;Integer&gt; minOptional = authors.stream()\n            .map(author -&gt; author.getAge())\n            .reduce(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BinaryOperator</span>&lt;Integer&gt;() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">apply</span><span class=\"hljs-params\">(Integer result, Integer element)</span> {\n                    <span class=\"hljs-keyword\">return</span> result &gt; element ? element : result;\n                }\n            });\n    minOptional.ifPresent(age -&gt; System.out.println(age));\n    \n}\n</code></div></pre>\n<h3><a id=\"25__835\"></a>2.5 注意事项</h3>\n<ul>\n<li>惰性求值（如果没有终结操作，没有中间操作是不会得到执行的）</li>\n<li>流是一次性的（一旦一个流对象经过一个终结操作后，这个流就不能再被使用）</li>\n<li>不会影响原数据（我们在流中可以对数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）</li>\n</ul>\n<h2><a id=\"3Optional_841\"></a>3.Optional</h2>\n<h3><a id=\"31__843\"></a>3.1 概述</h3>\n<blockquote>\n<p>我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。</p>\n<p>例如:</p>\n</blockquote>\n<p><img src=\"http://1.117.218.230:9000/test/img_image-202207270846159171685189201732.png\" alt=\"image-20220727084615917\" /></p>\n<ul>\n<li>尤其是对象中的属性还是一个对象的情况下。这种判断会更多。</li>\n<li>而过多的判断语句会让我们的代码显得臃肿不堪。</li>\n<li>所以在JDK8中引入了Optional,养成使用Optional的习惯和你可以写出更优雅的代码来避免空指针异常。</li>\n<li>并且在很多函数式编程相关的API中也都用到了Optional，如果不会使用Optional也会对函数式编程的学习造成影响。</li>\n</ul>\n<h3><a id=\"32__856\"></a>3.2 使用</h3>\n<h4><a id=\"321__858\"></a>3.2.1 创建对象</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Author</span> <span class=\"hljs-variable\">author</span> <span class=\"hljs-operator\">=</span> getAuthor();\n\n    Optional&lt;Author&gt; authorOptional = Optional.ofNullable(author);\n    authorOptional.ifPresent(author1 -&gt; System.out.println(author1.getName()));\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    Optional&lt;Author&gt; optionalAuthor = getOptionalAuthor();\n    optionalAuthor.ifPresent(author1 -&gt; System.out.println(author1.getName()));\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Optional&lt;Author&gt; <span class=\"hljs-title function_\">getOptionalAuthor</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">Author</span> <span class=\"hljs-variable\">author</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Author</span>(<span class=\"hljs-number\">1L</span>, <span class=\"hljs-string\">&quot;aaa&quot;</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-string\">&quot;aaaa&quot;</span>, <span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-keyword\">return</span> Optional.ofNullable(author);\n}\n</code></div></pre>\n<h4><a id=\"322__882\"></a>3.2.2 安全消费者</h4>\n<blockquote>\n<p>避免空指针异常</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Author</span> <span class=\"hljs-variable\">author</span> <span class=\"hljs-operator\">=</span> getAuthor();\n\n    Optional&lt;Author&gt; authorOptional = Optional.ofNullable(author);\n    authorOptional.ifPresent(author1 -&gt; System.out.println(author1.getName()));\n}\n</code></div></pre>\n<h4><a id=\"323__895\"></a>3.2.3 安全获取值</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    Optional&lt;Author&gt; optionalAuthor = getOptionalAuthor();\n    <span class=\"hljs-comment\">//如果optionalAuthor中Author对象不存在，则返回 new Author()</span>\n    <span class=\"hljs-type\">Author</span> <span class=\"hljs-variable\">author</span> <span class=\"hljs-operator\">=</span> optionalAuthor.orElseGet(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Author</span>());\n    System.out.println(author.getName());\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    Optional&lt;Author&gt; optionalAuthor = getOptionalAuthor();\n    <span class=\"hljs-comment\">//如果Author为null，则抛出异常</span>\n    <span class=\"hljs-type\">Author</span> <span class=\"hljs-variable\">author</span> <span class=\"hljs-operator\">=</span> optionalAuthor.orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;数据为空&quot;</span>));\n    System.out.println(author);\n}\n</code></div></pre>\n<h4><a id=\"323__917\"></a>3.2.3 过滤</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    Optional&lt;Author&gt; optionalAuthor = getOptionalAuthor();\n\n    <span class=\"hljs-comment\">//如果不满足filter条件，则会变成一个无数据的Optional对象</span>\n    optionalAuthor.filter(author -&gt; author.getAge() &gt; <span class=\"hljs-number\">18</span>)\n        .ifPresent(author -&gt; System.out.println(author.getName()));\n}\n</code></div></pre>\n<h4><a id=\"324__929\"></a>3.2.4 判断</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    Optional&lt;Author&gt; optionalAuthor = getOptionalAuthor();\n\n    <span class=\"hljs-comment\">//判断Author对象是否存在</span>\n    <span class=\"hljs-keyword\">if</span> (optionalAuthor.isPresent()) {\n        System.out.println(optionalAuthor.get().getName());\n    }\n}\n</code></div></pre>\n<h4><a id=\"325__942\"></a>3.2.5 数据转换</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    Optional&lt;Author&gt; optionalAuthor = getOptionalAuthor();\n\n    Optional&lt;List&lt;Book&gt;&gt; bookList = optionalAuthor.map(author -&gt; author.getBooks());\n    bookList.ifPresent(books -&gt; books.forEach(book -&gt; System.out.println(book)));\n}\n</code></div></pre>\n<h2><a id=\"4__953\"></a>4. 函数式接口</h2>\n<h3><a id=\"41__955\"></a>4.1 概述</h3>\n<blockquote>\n<p><code>只有一个抽象方法</code>的接口我们称之为函数接口。<br />\nJDK的函数式接口都加上了<code>@FunctionalInterface</code>注解进行标识。但是无论是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。</p>\n</blockquote>\n<h3><a id=\"42__960\"></a>4.2 常见函数式接口</h3>\n<ul>\n<li>\n<p>Consumer 消费接口</p>\n<p><img src=\"http://1.117.218.230:9000/test/img_image-202207270940295491685189201733.png\" alt=\"image-20220727094029549\" /></p>\n</li>\n<li>\n<p>Function 计算转换接口</p>\n<p><img src=\"http://1.117.218.230:9000/test/img_image-202207270940499321685189201732.png\" alt=\"image-20220727094049932\" /></p>\n</li>\n<li>\n<p>Predicate 判断接口</p>\n<p><img src=\"http://1.117.218.230:9000/test/img_image-202207270941132551685189201733.png\" alt=\"image-20220727094113255\" /></p>\n</li>\n<li>\n<p>Supplier 生产型接口</p>\n<p><img src=\"http://1.117.218.230:9000/test/img_image-202207270941479361685189201733.png\" alt=\"image-20220727094147936\" /></p>\n</li>\n</ul>\n<h3><a id=\"43__978\"></a>4.3 常用的默认方法</h3>\n<ul>\n<li>\n<p>and：与</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    authors.stream()\n            .filter(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Predicate</span>&lt;Author&gt;() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(Author author)</span> {\n                    <span class=\"hljs-keyword\">return</span> author.getAge() &gt; <span class=\"hljs-number\">17</span>;\n                }\n            }.and(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Predicate</span>&lt;Author&gt;() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(Author author)</span> {\n                    <span class=\"hljs-keyword\">return</span> author.getName().length() &gt; <span class=\"hljs-number\">1</span>;\n                }\n            })).forEach(author -&gt; System.out.println(author.getName() + <span class=\"hljs-string\">&quot;:&quot;</span> + author.getAge()));\n}\n</code></div></pre>\n</li>\n<li>\n<p>or：或</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    authors.stream()\n            .filter(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Predicate</span>&lt;Author&gt;() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(Author author)</span> {\n                    <span class=\"hljs-keyword\">return</span> author.getAge() &gt; <span class=\"hljs-number\">17</span>;\n                }\n            }.or(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Predicate</span>&lt;Author&gt;() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(Author author)</span> {\n                    <span class=\"hljs-keyword\">return</span> author.getName().length() &gt; <span class=\"hljs-number\">3</span>;\n                }\n            })).forEach(author -&gt; System.out.println(author));\n}\n</code></div></pre>\n</li>\n<li>\n<p>negate：取非</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    authors.stream()\n            .filter(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Predicate</span>&lt;Author&gt;() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(Author author)</span> {\n                    <span class=\"hljs-keyword\">return</span> author.getAge() &gt; <span class=\"hljs-number\">17</span>;\n                }\n            }.negate()).forEach(author -&gt; System.out.println(author.getAge()));\n}\n</code></div></pre>\n</li>\n</ul>\n<h2><a id=\"5_1038\"></a>5.方法引用</h2>\n<blockquote>\n<p>我们在使用lambda时，如果方法体中只有一个方法的调用的话（包括构造方法），我们可以用方法引用进一步简化代码。</p>\n</blockquote>\n<h3><a id=\"51__1042\"></a>5.1 基本格式</h3>\n<p>类名或对象名::方法名</p>\n<h3><a id=\"52__1046\"></a>5.2 语法详解</h3>\n<h4><a id=\"521__1048\"></a>5.2.1 引用类的静态方法</h4>\n<blockquote>\n<p>使用前提：<br />\n如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了某个类的静态方法，并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个静态方法中，这个时候我们就可以引用类的静态方法。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-comment\">//lambda</span>\n    authors.stream()\n            .map(author -&gt; author.getAge())\n            .map(age -&gt; String.valueOf(age));\n\n    <span class=\"hljs-comment\">//方法引用</span>\n    authors.stream()\n            .map(author -&gt; author.getAge())\n            .map(String::valueOf);\n}\n</code></div></pre>\n<h4><a id=\"522__1069\"></a>5.2.2 引用对象的实例方法</h4>\n<blockquote>\n<p>使用前提：<br />\n如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是<strong>调用了某个对象的成员方法</strong>，并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个成员方法中，这个时候我们就可以引用对象的实例方法</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n    \n    authors.stream()\n            .map(author -&gt; author.getName())\n                    .forEach(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Consumer</span>&lt;String&gt;() {\n                        <span class=\"hljs-meta\">@Override</span>\n                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">accept</span><span class=\"hljs-params\">(String name)</span> {\n                            sb.append(name);\n                        }\n                    });\n    <span class=\"hljs-comment\">//方法引用</span>\n    authors.stream()\n            .map(author -&gt; author.getName())\n            .forEach(sb::append);\n}\n</code></div></pre>\n<h4><a id=\"523__1095\"></a>5.2.3 引用类的实例方法</h4>\n<blockquote>\n<p>使用前提：<br />\n如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了第一个参数的成员方法，并且我们把要重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中，这个时候我们就可以引用类的实例方法。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">useString</span> {\n    String <span class=\"hljs-title function_\">use</span><span class=\"hljs-params\">(String str, <span class=\"hljs-type\">int</span> start, <span class=\"hljs-type\">int</span> length)</span>;\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">subAuthorName</span><span class=\"hljs-params\">(String str, useString useString)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> useString.use(str, start, length);\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    subAuthorName(<span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">useString</span>() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">use</span><span class=\"hljs-params\">(String str, <span class=\"hljs-type\">int</span> start, <span class=\"hljs-type\">int</span> length)</span> {\n            <span class=\"hljs-keyword\">return</span> str.substring(start, length);\n        }\n    });\n            \n    <span class=\"hljs-comment\">//方法引用</span>\n    subAuthorName(<span class=\"hljs-string\">&quot;李四&quot;</span>, String::substring);\n}\n</code></div></pre>\n<h4><a id=\"524__1126\"></a>5.2.4 构造器引用</h4>\n<blockquote>\n<p>使用前提：<br />\n如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了某个类的构造方法，并且我们把要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中，这个时候我们就可以引用构造器。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    authors.stream()\n            .map(author -&gt; author.getName())\n            .map(name -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(name))\n            .map(sb -&gt; sb.append(<span class=\"hljs-string\">&quot;李四&quot;</span>).toString())\n            .forEach(str -&gt; System.out.println(str));\n\n    <span class=\"hljs-comment\">//方法引用</span>\n    authors.stream()\n            .map(Author::getName)\n            .map(StringBuilder::<span class=\"hljs-keyword\">new</span>)\n            .map(sb -&gt; sb.append(<span class=\"hljs-string\">&quot;李四&quot;</span>).toString())\n            .forEach(System.out::println);\n    \n}\n</code></div></pre>\n<h2><a id=\"6_1151\"></a>6.高级用法</h2>\n<h3><a id=\"_1153\"></a>基本数据类型优化</h3>\n<blockquote>\n<p>我们之前用到的很多Stream的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。</p>\n<p>即使我们操作的是整数小数，但是实际用的都是他们的包装类。JDK5中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道装箱和拆箱肯定是要消耗时间的。虽然这个时间消耗很小。但是在大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了。</p>\n<p>所以为了让我们能够对这部分的时间消耗进行优化。Stream还提供了很多专门针对基本数据类型的方法。</p>\n<p>例如: mapToInt,mapToLong,mapToDouble,flatMapTolnt,flatMapToDouble等。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    authors.stream()\n            .mapToInt(author -&gt; author.getAge())\n            .map(age -&gt; age + <span class=\"hljs-number\">10</span>)\n            .forEach(System.out::println);\n}\n</code></div></pre>\n<h3><a id=\"_1178\"></a>并行流</h3>\n<blockquote>\n<p>当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        Stream&lt;Integer&gt; stream = Stream.of(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>);\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> stream.parallel() <span class=\"hljs-comment\">//parallel方法可以把穿行流转换成并行流</span>\n                .peek(num -&gt; System.out.println(num + <span class=\"hljs-string\">&quot;:&quot;</span> + Thread.currentThread().getName()))\n                .filter(num -&gt; num &gt; <span class=\"hljs-number\">5</span>)\n                .reduce((result, element) -&gt; result + element).get();\n        System.out.println(sum);\n}\n\n<span class=\"hljs-comment\">//----------------------------------------------------输出</span>\n<span class=\"hljs-number\">7</span>:main\n<span class=\"hljs-number\">9</span>:ForkJoinPool.commonPool-worker-<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">2</span>:ForkJoinPool.commonPool-worker-<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>:ForkJoinPool.commonPool-worker-<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">1</span>:ForkJoinPool.commonPool-worker-<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">5</span>:ForkJoinPool.commonPool-worker-<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">3</span>:ForkJoinPool.commonPool-worker-<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">8</span>:ForkJoinPool.commonPool-worker-<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">10</span>:ForkJoinPool.commonPool-worker-<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">6</span>:main\n<span class=\"hljs-number\">40</span>\n</code></div></pre>\n<p>也可以直接通过parallelStream直接获取并行流对象：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    List&lt;Author&gt; authors = getAuthors();\n\n    Stream&lt;Author&gt; parallelStream = authors.parallelStream();\n}\n</code></div></pre>\n<h2><a id=\"7_1217\"></a>7.使用</h2>\n<h3><a id=\"CollectorsgroupingBy_1219\"></a>Collectors.groupingBy</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\">List&lt;Post&gt; postList;\n\n<span class=\"hljs-comment\">// 遍历postList集合，将每个post中的id作为key，List&lt;Post&gt; post为value，存储到Map中</span>\nMap&lt;Long, List&lt;Post&gt;&gt; idPostMap = postList.stream()\n    .collect(Collectors.groupingBy(post -&gt; post.getId()));\n</code></div></pre>\n<p><img src=\"http://1.117.218.230:9000/test/img_image-202305131058222781685189201733.png\" alt=\"image-20230513105822278\" /></p>\n', '# 函数式编程——Stream流\r\n\r\n## 1.Lambda表达式\r\n\r\n### 1.1 核心原则\r\n\r\n> 可推导可省略\r\n\r\n### 1.2 基本格式\r\n\r\n> (参数列表) -> {代码}\r\n\r\n### 1.3 示例\r\n\r\n#### 例一\r\n\r\n```java\r\npackage com.lzh.lamdba;\r\n\r\npublic class Demo01 {\r\n    public static void main(String[] args) {\r\n        //匿名内部类\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                System.out.println(\"----------------\");\r\n            }\r\n        }).start();\r\n\r\n        //Lambda表达式\r\n        new Thread(()-> {\r\n            System.out.println(\"----------------\");\r\n        }).start();\r\n\r\n    }\r\n}\r\n```\r\n\r\n#### 例二\r\n\r\n```java\r\npublic class Demo01 {\r\n    public static void main(String[] args) {\r\n\r\n        //匿名内部类\r\n        int i = calculateNum(new IntBinaryOperator() {\r\n            @Override\r\n            public int applyAsInt(int left, int right) {\r\n                return left + right;\r\n            }\r\n        });\r\n        System.out.println(i);\r\n\r\n        //Lambda表达式\r\n        int i1 = calculateNum((int left, int right) -> {\r\n            return left + right;\r\n        });\r\n        System.out.println(i1);\r\n    }\r\n\r\n    public static int calculateNum(IntBinaryOperator operator) {\r\n        int a = 10;\r\n        int b = 20;\r\n        return operator.applyAsInt(a, b);\r\n    }\r\n}\r\n```\r\n\r\n#### 例三\r\n\r\n```java\r\npublic class Demo01 {\r\n    public static void main(String[] args) {\r\n\r\n        //匿名内部类\r\n        printNum(new IntPredicate() {\r\n            @Override\r\n            public boolean test(int value) {\r\n                return value % 2 == 0;\r\n            }\r\n        });\r\n\r\n        //Lambda表达式\r\n        printNum((int value) -> {\r\n            return value % 2 == 0;\r\n        });\r\n    }\r\n\r\n    public static void printNum(IntPredicate predicate) {\r\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\r\n        for (int i : arr) {\r\n            if (predicate.test(i)) {\r\n                System.out.println(i);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\n#### 例四\r\n\r\n```java\r\npublic class Demo01 {\r\n    public static void main(String[] args) {\r\n        //匿名内部类\r\n        Integer result = typeConver(new Function<String, Integer>() {\r\n            @Override\r\n            public Integer apply(String s) {\r\n                return Integer.valueOf(s);\r\n            }\r\n        });\r\n        System.out.println(result);\r\n\r\n        //Lambda表达式\r\n        Integer result1 = typeConver((String s) -> {\r\n            return Integer.valueOf(s);\r\n        });\r\n        System.out.println(result1);\r\n\r\n    }\r\n\r\n    public static <R> R typeConver(Function<String, R> function) {\r\n        String str = \"1235\";\r\n        R result = function.apply(str);\r\n        return result;\r\n    }\r\n\r\n}\r\n```\r\n\r\n#### 例五\r\n\r\n```java\r\npublic class Demo01 {\r\n    public static void main(String[] args) {\r\n        //匿名内部类\r\n        foreachArr(new IntConsumer() {\r\n            @Override\r\n            public void accept(int value) {\r\n                System.out.println(value);\r\n            }\r\n        });\r\n\r\n        //Lambda表达式\r\n        foreachArr((int value)->{\r\n            System.out.println(value);\r\n        });\r\n        \r\n    }\r\n\r\n    public static void foreachArr(IntConsumer consumer) {\r\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\r\n        for (int i : arr) {\r\n            consumer.accept(i);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### 1.4 省略规则\r\n\r\n- 参数类型可以省略\r\n- 方法体只有一句代码时，大括号、return和唯一一句代码的分号可以省略\r\n- 方法只有一个参数时小括号可以省略\r\n\r\n## 2.Stream流\r\n\r\n### 2.1 概述\r\n\r\n> Java8的Stream使用的是函数式编程模式，如同他的名字一样，它可以被用来对集合或数组进行链状流式的操作。可以方便的让我们对集合或数组操作。\r\n\r\n### 2.2 案例数据准备\r\n\r\n```java\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@EqualsAndHashCode\r\npublic class Author {\r\n\r\n    private Long id;\r\n    private String name;\r\n    private Integer age;\r\n    private String intro;\r\n    private List<Book> books;\r\n}\r\n```\r\n\r\n```java\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@EqualsAndHashCode\r\npublic class Book {\r\n\r\n    private Long id;\r\n    private String name;\r\n    private String category;\r\n    private Integer score;\r\n    private String intro;\r\n\r\n}\r\n```\r\n\r\n```java\r\npublic static List<Author> getAuthors() {\r\n    //数据初始化\r\n    Author author = new Author(1L, \"aa\", 11, \"aaaa\", null);\r\n    Author author2 = new Author(2L, \"bb\", 22, \"bbbb\", null);\r\n    Author author3 = new Author(3L, \"cc\", 33, \"cccc\", null);\r\n    Author author4 = new Author(4L, \"dd\", 44, \"dddd\", null);\r\n\r\n    //书籍列表\r\n    List<Book> books1 = new ArrayList<>();\r\n    List<Book> books2 = new ArrayList<>();\r\n    List<Book> books3 = new ArrayList<>();\r\n\r\n    books1.add(new Book(1L, \"爱情\", \"哲学\", 88, \"一个我\"));\r\n    books1.add(new Book(2L, \"理论\", \"成长\", 99, \"真理\"));\r\n\r\n    books2.add(new Book(1L, \"爱情2\", \"哲学\", 88, \"一个我\"));\r\n    books2.add(new Book(2L, \"理论2\", \"成长\", 99, \"真理\"));\r\n    books2.add(new Book(2L, \"理论2\", \"成长\", 99, \"真理\"));\r\n\r\n    books3.add(new Book(1L, \"爱情3\", \"哲学\", 88, \"一个我\"));\r\n    books3.add(new Book(2L, \"理论3\", \"成长\", 99, \"真理\"));\r\n    books3.add(new Book(2L, \"理论3\", \"成长\", 99, \"真理\"));\r\n\r\n    author.setBooks(books1);\r\n    author2.setBooks(books2);\r\n    author3.setBooks(books3);\r\n    author4.setBooks(books3);\r\n\r\n    List<Author> authorList = new ArrayList<>(Arrays.asList(author, author2, author3, author4));\r\n    return authorList;\r\n}\r\n```\r\n\r\n### 2.3 快速入门\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authorList = getAuthors();\r\n    //打印所有年龄小于18的作家的名字，并且要注意去重\r\n    authorList.stream() //把集合转换成流\r\n            .distinct() //去重\r\n            .filter(author -> author.getAge() < 18) //过滤\r\n            .forEach(author -> System.out.println(author.getName())); //遍历\r\n\r\n}\r\n```\r\n\r\n### 2.4 常用操作\r\n\r\n#### 2.4.1 创建流\r\n\r\n单列集合：`集合对象.stream()`\r\n\r\n```java\r\nList<Author> authorList = getAuthors();\r\nStream<Author> stream = authorList.stream();\r\n```\r\n\r\n数组：`Arrays.stream(数组)`或者使用`Stream.of()`来创建\r\n\r\n```\r\nInteger[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};\r\nStream<Integer> stream = Arrays.stream(arr);\r\nStream<Integer> stream1 = Stream.of(arr);\r\n```\r\n\r\n双列集合：转换成单列集合后再创建\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    Map<String, Integer> map = new HashMap<>();\r\n    map.put(\"a\", 1);\r\n    map.put(\"b\", 2);\r\n    Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\r\n    Stream<Map.Entry<String, Integer>> stream = entrySet.stream();\r\n    stream.filter(new Predicate<Map.Entry<String, Integer>>() {\r\n        @Override\r\n        public boolean test(Map.Entry<String, Integer> entry) {\r\n            return entry.getValue() > 1;\r\n        }\r\n    }).forEach(new Consumer<Map.Entry<String, Integer>>() {\r\n        @Override\r\n        public void accept(Map.Entry<String, Integer> entry) {\r\n            System.out.println(entry.getKey() + \":\" + entry.getValue());\r\n        }\r\n    });\r\n}\r\n```\r\n\r\n#### 2.4.2 中间操作\r\n\r\n##### filter\r\n\r\n> 可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中。\r\n\r\n例如：\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    //打印所有姓名长度大于1的作家的姓名\r\n    authors.stream()\r\n            .filter(author -> author.getName().length() > 2)\r\n            .forEach(author -> System.out.println(author.getName()));\r\n}\r\n```\r\n\r\n##### map\r\n\r\n> 可以把对流中的元素进行计算或转换。\r\n\r\n\r\n\r\n例如：\r\n\r\n- **转换**\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    //打印所有作家的姓名\r\n    authors.stream()\r\n            .map(new Function<Author, String>() {\r\n                @Override\r\n                public String apply(Author author) {\r\n                    return author.getName();\r\n                }\r\n            })\r\n            .forEach(name -> System.out.println(name));\r\n    \r\n    authors.stream()\r\n            .map(author -> author.getName())\r\n            .forEach(name -> System.out.println(name));\r\n\r\n}\r\n```\r\n\r\n- 计算\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    authors.stream()\r\n            .map(author -> author.getAge())\r\n            .map(age -> age + 10)\r\n            .forEach(age -> System.out.println(age));   \r\n}\r\n```\r\n\r\n##### distinct\r\n\r\n> 可以去除流中的重复元素\r\n\r\n\r\n\r\n`注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要重写equals方法。`\r\n\r\n\r\n\r\n例如：\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    authors.stream()\r\n            .distinct()\r\n            .forEach(author -> System.out.println(author.getName()));\r\n\r\n}\r\n```\r\n\r\n##### sorted\r\n\r\n> 可以对流中的元素进行排序。\r\n\r\n\r\n\r\n例如：\r\n\r\n- 调用空参sorted方法，需要流中的元素实现Comparable接口\r\n\r\n  ```java\r\n  @Data\r\n  @NoArgsConstructor\r\n  @AllArgsConstructor\r\n  @EqualsAndHashCode\r\n  public class Author implements Comparable<Author> {\r\n  \r\n      private Long id;\r\n      private String name;\r\n      private Integer age;\r\n      private String intro;\r\n      private List<Book> books;\r\n  \r\n      @Override\r\n      public int compareTo(Author o) {\r\n          return this.getAge() - o.getAge();\r\n      }\r\n  }\r\n  ```\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      //对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素\r\n      authors.stream()\r\n              .distinct()\r\n              .sorted()\r\n              .forEach(author -> System.out.println(author.getAge()));\r\n  }\r\n  ```\r\n\r\n- 有参sorted方法\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      //对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素\r\n      authors.stream()\r\n          .distinct()\r\n          .sorted(new Comparator<Author>() {\r\n              @Override\r\n              public int compare(Author o1, Author o2) {\r\n                  return o1.getAge() - o2.getAge();\r\n              }\r\n          })\r\n          .forEach(author -> System.out.println(author.getAge()));\r\n  \r\n      authors.stream()\r\n          .distinct()\r\n          .sorted((o1, o2) -> o1.getAge() - o2.getAge())\r\n          .forEach(author -> System.out.println(author.getAge()));\r\n  }\r\n  ```\r\n\r\n##### limit\r\n\r\n> 可以设置流的最大长度，超出的部分将被抛弃。\r\n\r\n\r\n\r\n例如：\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    //对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素，然后打印其中年龄最大的两个作家的姓名\r\n    authors.stream()\r\n        .distinct()\r\n        .sorted((o1, o2) -> o2.getAge() - o1.getAge())\r\n        .limit(2)\r\n        .forEach(author -> System.out.println(author.getName()));\r\n\r\n}\r\n```\r\n\r\n##### skip\r\n\r\n> 跳过流中的前n个元素，返回剩下的元素。\r\n\r\n\r\n\r\n例如：\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    //打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序\r\n    authors.stream()\r\n        .distinct()\r\n        .sorted((o1, o2) -> o2.getAge() - o1.getAge())\r\n        .skip(1)\r\n        .forEach(author -> System.out.println(author.getAge()));\r\n\r\n}\r\n```\r\n\r\n##### flatMap\r\n\r\n> map只能把一个对象转换成另一个对象来作为流中的元素，而flatMap可以把一个对象转换成多个对象作为流中的元素。\r\n\r\n\r\n\r\n例一：\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    //打印所有书籍的名字，要求对重复的元素进行去重\r\n    authors.stream()\r\n        .distinct()\r\n        .flatMap(new Function<Author, Stream<Book>>() {\r\n            @Override\r\n            public Stream<Book> apply(Author author) {\r\n                return author.getBooks().stream();\r\n            }\r\n        })\r\n        .forEach(new Consumer<Book>() {\r\n            @Override\r\n            public void accept(Book book) {\r\n                System.out.println(book);\r\n            }\r\n        });\r\n    \r\n    authors.stream()\r\n        .distinct()\r\n        .flatMap(author -> author.getBooks().stream())\r\n        .forEach(book -> System.out.println(book));\r\n}\r\n```\r\n\r\n例二：\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    //打印现有数据的所有分类，要求对分类进行去重，不能出现这种：哲学，爱情\r\n    authors.stream()\r\n        .flatMap(author -> author.getBooks().stream())\r\n        .distinct()\r\n        .flatMap(book -> Arrays.stream(book.getCategory().split(\"，\")))\r\n        .distinct()\r\n        .forEach(category -> System.out.println(category));\r\n\r\n}\r\n```\r\n\r\n#### 2.4.3 终结操作\r\n\r\n##### forEach\r\n\r\n> 对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作\r\n\r\n例子：输出所有作家的名字\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    authors.stream()\r\n            .map(author -> author.getName())\r\n            .forEach(name -> System.out.println(name));   \r\n}\r\n```\r\n\r\n##### count\r\n\r\n> 可以用来获取当前流中元素的个数。\r\n\r\n例子：打印这些作家的所出书籍的数目，注意删除重复元素\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    long count = authors.stream()\r\n            .flatMap(author -> author.getBooks().stream())\r\n            .distinct()\r\n            .count();\r\n    System.out.println(count);\r\n}\r\n```\r\n\r\n##### max&min\r\n\r\n> 可以用来获取流中的最值\r\n\r\n例子：分别获取这些作家所出书籍的最高分和最低分并打印\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    Optional<Integer> max = authors.stream()\r\n            .flatMap(author -> author.getBooks().stream())\r\n            .map(book -> book.getScore())\r\n            .max((o1, o2) -> o1 - o2);\r\n    System.out.println(max.get());\r\n\r\n\r\n    Optional<Integer> min = authors.stream()\r\n            .flatMap(author -> author.getBooks().stream())\r\n            .map(book -> book.getScore())\r\n            .min((o1, o2) -> o1 - o2);\r\n    System.out.println(min.get());\r\n}\r\n```\r\n\r\n##### collect\r\n\r\n> 把当前流转换成一个集合\r\n\r\n例子：\r\n\r\n- 获取一个存放所有作者名字的List集合\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      List<String> names = authors.stream()\r\n              .map(author -> author.getName())\r\n              .collect(Collectors.toList());\r\n      System.out.println(names);   \r\n  }\r\n  ```\r\n\r\n- 获取一个所有书名的Set集合\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      Set<String> books = authors.stream()\r\n              .flatMap(author -> author.getBooks().stream())\r\n              .map(book -> book.getName())\r\n              .collect(Collectors.toSet());\r\n  \r\n      System.out.println(books);\r\n  }\r\n  ```\r\n\r\n- 获取一个Map集合，map的key为作者名，value为List<Book>\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      Map<String, List<Book>> map = authors.stream()\r\n              .distinct()\r\n              .collect(Collectors.toMap(author -> author.getName(), author -> author.getBooks()));\r\n  \r\n      System.out.println(map);\r\n  }\r\n  ```\r\n\r\n##### 查找与匹配\r\n\r\n###### anyMatch\r\n\r\n> 可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型\r\n\r\n例子：判断是否有年龄再29以上的作家\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    boolean b = authors.stream()\r\n            .anyMatch(author -> author.getAge() > 29);\r\n    System.out.println(b);\r\n\r\n}\r\n```\r\n\r\n###### allMatch\r\n\r\n> 可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则为false。\r\n\r\n例子：判断是否所有的作家都是成年人\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    boolean b = authors.stream()\r\n            .allMatch(author -> author.getAge() >= 18);\r\n    System.out.println(b);\r\n\r\n}\r\n```\r\n\r\n###### noneMatch\r\n\r\n> 可以用来判断流中的元素是否都不符合匹配条件，结果为boolean类型。如果都不符合结果为true，否则为false。\r\n\r\n例子：判断作家是否都没有超过100岁的\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    boolean b = authors.stream()\r\n            .noneMatch(author -> author.getAge() >= 100);\r\n    System.out.println(b);\r\n\r\n}\r\n```\r\n\r\n###### findAny\r\n\r\n> 获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素\r\n\r\n例子：获取任意一个年龄大于18的作家，如果存在就输出他的名字\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    Optional<Author> optionalAuthor = authors.stream()\r\n            .filter(author -> author.getAge() > 18)\r\n            .findAny();\r\n    optionalAuthor.ifPresent(author -> System.out.println(author.getName()));\r\n}\r\n```\r\n\r\n###### findFirst\r\n\r\n> 获取流中的第一个元素\r\n\r\n例子：获取一个年龄最小的作家，并输出他的姓名\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    Optional<Author> author = authors.stream()\r\n        .sorted((o1, o2) -> o2.getAge() - o1.getAge())\r\n        .findFirst();\r\n    author.ifPresent(author1 -> System.out.println(author1.getName()));\r\n}\r\n```\r\n\r\n###### reduce归并\r\n\r\n> 对流中的数据按照你指定的计算方式计算出一个结果。（缩紧操作）\r\n>\r\n> \r\n>\r\n> reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始化值进行计算，计算结果再和后面的元素计算。\r\n\r\nreduce两个参数的重载形式内部的计算方式如下：\r\n\r\n```java\r\nT result = identity;\r\nfor (T element : this.stream) {\r\n    result = accumulator.apply(result, element)\r\n}\r\nreturn result;\r\n```\r\n\r\n其中identity就是我们可以通过方法参数传入的初始值，accumulator的apply具体进行什么计算也是我们通过方法参数来确定的。\r\n\r\n\r\n\r\n例子：\r\n\r\n- 使用reduce求所有作者年龄的和\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      Integer sum = authors.stream()\r\n              .map(author -> author.getAge())\r\n              .reduce(0, (result, element) -> result + element);\r\n      System.out.println(sum);\r\n  }\r\n  ```\r\n\r\n- 使用reduce求所有作者中年龄的最大值\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      Integer max = authors.stream()\r\n              .map(author -> author.getAge())\r\n              .reduce(Integer.MIN_VALUE, (result, element) -> result < element ? element : result);\r\n      System.out.println(max);\r\n  }\r\n  ```\r\n\r\n- 使用reduce求所有作者中年龄的最小值\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      Integer min = authors.stream()\r\n              .map(author -> author.getAge())\r\n              .reduce(Integer.MAX_VALUE, (result, element) -> result > element ? element : result);\r\n      System.out.println(min);\r\n  }\r\n  ```\r\n\r\nreduce一个参数的重载形式内部的计算\r\n\r\n```java\r\nboolean foundAny = false;\r\nT result = null;\r\nfor (T element : this stream){\r\n    if (!foundAny) {\r\n        foundAny = true;\r\n        result = element;\r\n    } else result = accumulator.apply(result, element);\r\n}\r\nreturn foundAny ? Optional.of(result) : Optional.empty();\r\n```\r\n\r\n如果用一个参数的重载方法去求最小值，代码如下：\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    Optional<Integer> minOptional = authors.stream()\r\n            .map(author -> author.getAge())\r\n            .reduce(new BinaryOperator<Integer>() {\r\n                @Override\r\n                public Integer apply(Integer result, Integer element) {\r\n                    return result > element ? element : result;\r\n                }\r\n            });\r\n    minOptional.ifPresent(age -> System.out.println(age));\r\n    \r\n}\r\n```\r\n\r\n### 2.5 注意事项\r\n\r\n- 惰性求值（如果没有终结操作，没有中间操作是不会得到执行的）\r\n- 流是一次性的（一旦一个流对象经过一个终结操作后，这个流就不能再被使用）\r\n- 不会影响原数据（我们在流中可以对数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）\r\n\r\n## 3.Optional\r\n\r\n### 3.1 概述\r\n\r\n> 我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。\r\n>\r\n> 例如:\r\n\r\n![image-20220727084615917](http://1.117.218.230:9000/test/img_image-202207270846159171685189201732.png)\r\n\r\n* 尤其是对象中的属性还是一个对象的情况下。这种判断会更多。\r\n* 而过多的判断语句会让我们的代码显得臃肿不堪。\r\n* 所以在JDK8中引入了Optional,养成使用Optional的习惯和你可以写出更优雅的代码来避免空指针异常。\r\n* 并且在很多函数式编程相关的API中也都用到了Optional，如果不会使用Optional也会对函数式编程的学习造成影响。\r\n\r\n### 3.2 使用\r\n\r\n#### 3.2.1 创建对象\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    Author author = getAuthor();\r\n\r\n    Optional<Author> authorOptional = Optional.ofNullable(author);\r\n    authorOptional.ifPresent(author1 -> System.out.println(author1.getName()));\r\n}\r\n```\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n\r\n    Optional<Author> optionalAuthor = getOptionalAuthor();\r\n    optionalAuthor.ifPresent(author1 -> System.out.println(author1.getName()));\r\n}\r\n\r\npublic static Optional<Author> getOptionalAuthor() {\r\n    Author author = new Author(1L, \"aaa\", 11, \"aaaa\", null);\r\n    return Optional.ofNullable(author);\r\n}\r\n```\r\n\r\n#### 3.2.2 安全消费者\r\n\r\n> 避免空指针异常\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    Author author = getAuthor();\r\n\r\n    Optional<Author> authorOptional = Optional.ofNullable(author);\r\n    authorOptional.ifPresent(author1 -> System.out.println(author1.getName()));\r\n}\r\n```\r\n\r\n#### 3.2.3 安全获取值\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n\r\n    Optional<Author> optionalAuthor = getOptionalAuthor();\r\n    //如果optionalAuthor中Author对象不存在，则返回 new Author()\r\n    Author author = optionalAuthor.orElseGet(() -> new Author());\r\n    System.out.println(author.getName());\r\n}\r\n```\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n\r\n    Optional<Author> optionalAuthor = getOptionalAuthor();\r\n    //如果Author为null，则抛出异常\r\n    Author author = optionalAuthor.orElseThrow(() -> new RuntimeException(\"数据为空\"));\r\n    System.out.println(author);\r\n}\r\n```\r\n\r\n#### 3.2.3 过滤\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    Optional<Author> optionalAuthor = getOptionalAuthor();\r\n\r\n    //如果不满足filter条件，则会变成一个无数据的Optional对象\r\n    optionalAuthor.filter(author -> author.getAge() > 18)\r\n        .ifPresent(author -> System.out.println(author.getName()));\r\n}\r\n```\r\n\r\n#### 3.2.4 判断\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    Optional<Author> optionalAuthor = getOptionalAuthor();\r\n\r\n    //判断Author对象是否存在\r\n    if (optionalAuthor.isPresent()) {\r\n        System.out.println(optionalAuthor.get().getName());\r\n    }\r\n}\r\n```\r\n\r\n#### 3.2.5 数据转换\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    Optional<Author> optionalAuthor = getOptionalAuthor();\r\n\r\n    Optional<List<Book>> bookList = optionalAuthor.map(author -> author.getBooks());\r\n    bookList.ifPresent(books -> books.forEach(book -> System.out.println(book)));\r\n}\r\n```\r\n\r\n## 4. 函数式接口\r\n\r\n### 4.1 概述\r\n\r\n> `只有一个抽象方法`的接口我们称之为函数接口。\r\n> JDK的函数式接口都加上了`@FunctionalInterface`注解进行标识。但是无论是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。\r\n\r\n### 4.2 常见函数式接口\r\n\r\n- Consumer 消费接口\r\n\r\n  ![image-20220727094029549](http://1.117.218.230:9000/test/img_image-202207270940295491685189201733.png)\r\n\r\n- Function 计算转换接口\r\n\r\n  ![image-20220727094049932](http://1.117.218.230:9000/test/img_image-202207270940499321685189201732.png)\r\n\r\n- Predicate 判断接口\r\n\r\n  ![image-20220727094113255](http://1.117.218.230:9000/test/img_image-202207270941132551685189201733.png)\r\n\r\n- Supplier 生产型接口\r\n\r\n  ![image-20220727094147936](http://1.117.218.230:9000/test/img_image-202207270941479361685189201733.png)\r\n\r\n### 4.3 常用的默认方法\r\n\r\n- and：与\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      authors.stream()\r\n              .filter(new Predicate<Author>() {\r\n                  @Override\r\n                  public boolean test(Author author) {\r\n                      return author.getAge() > 17;\r\n                  }\r\n              }.and(new Predicate<Author>() {\r\n                  @Override\r\n                  public boolean test(Author author) {\r\n                      return author.getName().length() > 1;\r\n                  }\r\n              })).forEach(author -> System.out.println(author.getName() + \":\" + author.getAge()));\r\n  }\r\n  ```\r\n\r\n- or：或\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      authors.stream()\r\n              .filter(new Predicate<Author>() {\r\n                  @Override\r\n                  public boolean test(Author author) {\r\n                      return author.getAge() > 17;\r\n                  }\r\n              }.or(new Predicate<Author>() {\r\n                  @Override\r\n                  public boolean test(Author author) {\r\n                      return author.getName().length() > 3;\r\n                  }\r\n              })).forEach(author -> System.out.println(author));\r\n  }\r\n  ```\r\n\r\n- negate：取非\r\n\r\n  ```java\r\n  public static void main(String[] args) {\r\n      List<Author> authors = getAuthors();\r\n  \r\n      authors.stream()\r\n              .filter(new Predicate<Author>() {\r\n                  @Override\r\n                  public boolean test(Author author) {\r\n                      return author.getAge() > 17;\r\n                  }\r\n              }.negate()).forEach(author -> System.out.println(author.getAge()));\r\n  }\r\n  ```\r\n\r\n## 5.方法引用\r\n\r\n> 我们在使用lambda时，如果方法体中只有一个方法的调用的话（包括构造方法），我们可以用方法引用进一步简化代码。\r\n\r\n### 5.1 基本格式\r\n\r\n类名或对象名::方法名\r\n\r\n### 5.2 语法详解\r\n\r\n#### 5.2.1 引用类的静态方法\r\n\r\n> 使用前提：\r\n> 如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了某个类的静态方法，并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个静态方法中，这个时候我们就可以引用类的静态方法。\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    //lambda\r\n    authors.stream()\r\n            .map(author -> author.getAge())\r\n            .map(age -> String.valueOf(age));\r\n\r\n    //方法引用\r\n    authors.stream()\r\n            .map(author -> author.getAge())\r\n            .map(String::valueOf);\r\n}\r\n```\r\n\r\n#### 5.2.2 引用对象的实例方法\r\n\r\n> 使用前提：\r\n> 如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是**调用了某个对象的成员方法**，并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个成员方法中，这个时候我们就可以引用对象的实例方法\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    StringBuilder sb = new StringBuilder();\r\n    \r\n    authors.stream()\r\n            .map(author -> author.getName())\r\n                    .forEach(new Consumer<String>() {\r\n                        @Override\r\n                        public void accept(String name) {\r\n                            sb.append(name);\r\n                        }\r\n                    });\r\n    //方法引用\r\n    authors.stream()\r\n            .map(author -> author.getName())\r\n            .forEach(sb::append);\r\n}\r\n```\r\n\r\n#### 5.2.3 引用类的实例方法\r\n\r\n> 使用前提：\r\n> 如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了第一个参数的成员方法，并且我们把要重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中，这个时候我们就可以引用类的实例方法。\r\n\r\n```java\r\ninterface useString {\r\n    String use(String str, int start, int length);\r\n}\r\n\r\npublic static String subAuthorName(String str, useString useString) {\r\n    int start = 0;\r\n    int length = 1;\r\n    return useString.use(str, start, length);\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    subAuthorName(\"李四\", new useString() {\r\n        @Override\r\n        public String use(String str, int start, int length) {\r\n            return str.substring(start, length);\r\n        }\r\n    });\r\n            \r\n    //方法引用\r\n    subAuthorName(\"李四\", String::substring);\r\n}\r\n```\r\n\r\n#### 5.2.4 构造器引用\r\n\r\n> 使用前提：\r\n> 如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了某个类的构造方法，并且我们把要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中，这个时候我们就可以引用构造器。\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    authors.stream()\r\n            .map(author -> author.getName())\r\n            .map(name -> new StringBuilder(name))\r\n            .map(sb -> sb.append(\"李四\").toString())\r\n            .forEach(str -> System.out.println(str));\r\n\r\n    //方法引用\r\n    authors.stream()\r\n            .map(Author::getName)\r\n            .map(StringBuilder::new)\r\n            .map(sb -> sb.append(\"李四\").toString())\r\n            .forEach(System.out::println);\r\n    \r\n}\r\n```\r\n\r\n## 6.高级用法\r\n\r\n### 基本数据类型优化\r\n\r\n> 我们之前用到的很多Stream的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。\r\n>\r\n> \r\n>\r\n> 即使我们操作的是整数小数，但是实际用的都是他们的包装类。JDK5中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道装箱和拆箱肯定是要消耗时间的。虽然这个时间消耗很小。但是在大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了。\r\n>\r\n> \r\n>\r\n> 所以为了让我们能够对这部分的时间消耗进行优化。Stream还提供了很多专门针对基本数据类型的方法。\r\n>\r\n> 例如: mapToInt,mapToLong,mapToDouble,flatMapTolnt,flatMapToDouble等。\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    authors.stream()\r\n            .mapToInt(author -> author.getAge())\r\n            .map(age -> age + 10)\r\n            .forEach(System.out::println);\r\n}\r\n```\r\n\r\n### 并行流\r\n\r\n> 当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n\r\n        Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n        Integer sum = stream.parallel() //parallel方法可以把穿行流转换成并行流\r\n                .peek(num -> System.out.println(num + \":\" + Thread.currentThread().getName()))\r\n                .filter(num -> num > 5)\r\n                .reduce((result, element) -> result + element).get();\r\n        System.out.println(sum);\r\n}\r\n\r\n//----------------------------------------------------输出\r\n7:main\r\n9:ForkJoinPool.commonPool-worker-2\r\n2:ForkJoinPool.commonPool-worker-3\r\n4:ForkJoinPool.commonPool-worker-2\r\n1:ForkJoinPool.commonPool-worker-6\r\n5:ForkJoinPool.commonPool-worker-5\r\n3:ForkJoinPool.commonPool-worker-1\r\n8:ForkJoinPool.commonPool-worker-4\r\n10:ForkJoinPool.commonPool-worker-7\r\n6:main\r\n40\r\n```\r\n\r\n也可以直接通过parallelStream直接获取并行流对象：\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    List<Author> authors = getAuthors();\r\n\r\n    Stream<Author> parallelStream = authors.parallelStream();\r\n}\r\n```\r\n\r\n## 7.使用\r\n\r\n### Collectors.groupingBy\r\n\r\n```java\r\nList<Post> postList;\r\n\r\n// 遍历postList集合，将每个post中的id作为key，List<Post> post为value，存储到Map中\r\nMap<Long, List<Post>> idPostMap = postList.stream()\r\n    .collect(Collectors.groupingBy(post -> post.getId()));\r\n```\r\n\r\n![image-20230513105822278](http://1.117.218.230:9000/test/img_image-202305131058222781685189201733.png)\r\n\r\n', '函数式编程——Stream流', 1, 'http://1.117.218.230:9000/test/img_1685189352672.jpg', '0', '0', 6, 1, 0, 1, '1', 1, '2023-05-27 20:06:58', 1, '2023-05-31 14:18:14', 0);
INSERT INTO `lzh_article` VALUES (1662432903277207554, 'SpringMVC', '<h1><a id=\"SpringMVC_0\"></a>一、什么是SpringMVC</h1>\n<blockquote>\n<p>它是基于MVC开发模式的框架，用来优化控制器，它是Spring家族的一员，它也具备IOC和AOP</p>\n</blockquote>\n<h2><a id=\"11_MVC_4\"></a>1.1 什么是MVC？</h2>\n<blockquote>\n<p>它是一种开发模式，它是模型视图控制器的简称，所有的web应用都是基于MVC开发</p>\n</blockquote>\n<ul>\n<li>M：模型层，包含实体类，业务逻辑层，数据访问层</li>\n<li>V：视图层，html，JavaScript等都是视图层，用来显现数据</li>\n<li>C：控制器，它是用来接收客户端的请求，并返回响应到客户端的组件，Servlet就是组件</li>\n</ul>\n<h2><a id=\"12_SpringMVC_12\"></a>1.2 SpringMVC框架的优点</h2>\n<ul>\n<li>轻量级，基于MVC的框架</li>\n<li>易于上手，容易理解，功能强大</li>\n<li>具备IOC和AOP</li>\n<li>完全基于注解开发</li>\n</ul>\n<h1><a id=\"SpringMVC_19\"></a>二、基于注解的SpringMVC框架开发的步骤</h1>\n<ol>\n<li>\n<p>新建项目，选择webapp模板</p>\n</li>\n<li>\n<p>修改目录，添加缺失的test,java,resources（两套），并修改目录属性</p>\n<p><img src=\"http://1.117.218.230:9000/test/img_image-202204251932077361685189858847.png\" alt=\"image-20220425193207736\" /></p>\n</li>\n<li>\n<p>修改pom.xml文件，添加SpringMVC的依赖，添加Servlet的依赖</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>\n  <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.lzh<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>demo01<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">packaging</span>&gt;</span>war<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">packaging</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.11<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!--springmvc的依赖--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.3.18<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--servlet的依赖--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>javax.servlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>src/main/java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">includes</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>**/*.xml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>**/*.properties<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">includes</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>src/main/resources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">includes</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>**/*.xml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>**/*.properties<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">includes</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>添加springmvc.xml配置文件，指定包扫描，添加视图解析器</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span>\n       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>\n       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!--添加包扫描--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;com.lzh.controller&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">context:component-scan</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--添加添加视图解析器--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--配置前缀--&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;prefix&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;/admin/&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--配置后缀--&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;suffix&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;.jsp&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>删除web.xml文件，新建web.xml</p>\n</li>\n<li>\n<p>在web.xml文件中注册springmvc框架（所有的web请求都是基于servlet的）</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">web-app</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span>\n         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>\n         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span>\n         <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;4.0&quot;</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!--注册SpringMVC框架--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>springmvc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">init-param</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-name</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-value</span>&gt;</span>classpath:springmvc.xml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-value</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">init-param</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>springmvc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--\n            指定拦截什么样的请求\n            http://localhost:8080/one\n            http://localhost:8080/index.jsp\n            http://localhost:8080/demo.action\n            &lt;a href=&quot;${pageContext.request.contextPath}/demo.action&quot;&gt;访问服务器&lt;/a&gt;\n        --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>*.action<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">web-app</span>&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>在webapp目录下新建admin目录，在admin目录下新建main.jsp页面，删除index.jsp页面，并新建，发送请求给服务器</p>\n<ul>\n<li>index.jsp</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-jsp\">&lt;%@ page contentType=<span class=\"hljs-string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"hljs-string\">&quot;java&quot;</span> %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;br&gt;&lt;br&gt;&lt;br&gt;\n&lt;a href=<span class=\"hljs-string\">&quot;${pageContext.request.contextPath}/demo.action&quot;</span>&gt;访问服务器&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></div></pre>\n</li>\n<li>\n<p>开发控制器（Servlet），它是一个普通的类</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Controller</span> <span class=\"hljs-comment\">//交给Spring去创建对象</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoAction</span> {\n    <span class=\"hljs-comment\">/**\n     * action中所有的功能实现都是由方法来完成的\n     * action方法的规范\n     * 1.访问权限是public\n     * 2.方法的返回值任意\n     * 3.方法名称任意\n     * 4.方法可以没有参数，如果有可以是任意类型\n     * 5.要使用<span class=\"hljs-doctag\">@RequestMapping</span>注解来声明一个访问的路径（名称）\n     */</span>\n    <span class=\"hljs-meta\">@RequestMapping(&quot;/demo.action&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">demo</span><span class=\"hljs-params\">()</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;服务器被访问到了&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;main&quot;</span>; <span class=\"hljs-comment\">//可以直接跳到/admin/main.jsp页面上</span>\n    }\n}\n\n</code></div></pre>\n</li>\n<li>\n<p>添加tomcat进行测试功能</p>\n</li>\n</ol>\n<h1><a id=\"web_192\"></a>三、分析web请求</h1>\n<p>web请求执行的流程</p>\n<p>​								   		核心处理器</p>\n<p>index.jsp&lt;----------------&gt;DispatcherServlet&lt;---------------------&gt;SpringMVC的处理器是一个普通的方法</p>\n<p>one.jsp&lt;----------------&gt;DispatcherServlet&lt;---------------------&gt;SpringMVC的处理器是一个普通的方法</p>\n<p>DispatcherServlet要在web.xml文件中注册才可用</p>\n<h1><a id=\"RequestMapping_204\"></a>四、@RequestMapping注解</h1>\n<blockquote>\n<p>此注解就是来映射服务器访问的路径</p>\n</blockquote>\n<ol>\n<li>\n<p>此注解可加在方法上，是为此方法注册一个可以访问的名称(路径)</p>\n</li>\n<li>\n<p>此注解可以加在类上，相当于是包名(虚拟路径)，区分不同类中相同的action的名称</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@RequestMapping(&quot;/user&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoAction</span> {...}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;${pageContext.request.contextPath}/user/demo.action&quot;</span>&gt;</span>访问服务器<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>此注解可区分get请求和post请求</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Controller</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReqAction</span> {\n\n    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/req.action&quot;, method = RequestMethod.GET)</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">req</span><span class=\"hljs-params\">()</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;get请求.....&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;main&quot;</span>;\n    }\n\n    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/req.action&quot;, method = RequestMethod.POST)</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">req1</span><span class=\"hljs-params\">()</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;post请求.....&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;main&quot;</span>;\n    }\n}\n</code></div></pre>\n</li>\n</ol>\n<h1><a id=\"_241\"></a>五、五种数据提交方式的优化</h1>\n<ol>\n<li>散提交数据</li>\n</ol>\n<p>index.jsp</p>\n<pre><div class=\"hljs\"><code class=\"lang-jsp\">&lt;h2&gt;<span class=\"hljs-number\">1.</span>单个数据提交&lt;/h2&gt;\n&lt;form action=<span class=\"hljs-string\">&quot;${pageContext.request.contextPath}/one.action&quot;</span>&gt;\n    name:&lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> name=<span class=\"hljs-string\">&quot;myname&quot;</span>/&gt;\n    age:&lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> name=<span class=\"hljs-string\">&quot;age&quot;</span>/&gt;\n    &lt;input type=<span class=\"hljs-string\">&quot;submit&quot;</span> value=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;\n&lt;/form&gt;\n</code></div></pre>\n<p>DataSubmitAction.java</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Controller</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSubmitAction</span> {\n\n    <span class=\"hljs-meta\">@RequestMapping(&quot;/one.action&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">one</span><span class=\"hljs-params\">(String myname, <span class=\"hljs-type\">int</span> age)</span> { <span class=\"hljs-comment\">//自动注入，并且类型转换</span>\n        System.out.println(<span class=\"hljs-string\">&quot;myname=&quot;</span> + myname + <span class=\"hljs-string\">&quot;,age=&quot;</span> + (age + <span class=\"hljs-number\">100</span>));\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;main&quot;</span>;\n    }\n}\n</code></div></pre>\n<ol start=\"2\">\n<li>对象封装提交数据</li>\n</ol>\n<p><code>在提交请求中，保证请求参数的名称与实体类中成员变量的名称一致，则可以自动创建对象，自动提交数据，自动类型转换，自动封装数据到对象中</code></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@AllArgsConstructor</span>\n<span class=\"hljs-meta\">@NoArgsConstructor</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Users</span> {\n\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>2.对象封装数据提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;${pageContext.request.contextPath}/two.action&quot;</span>&gt;</span>\n    name:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span>/&gt;</span>\n    age:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Controller</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSubmitAction</span> {\n\n    <span class=\"hljs-meta\">@RequestMapping(&quot;/two.action&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">two</span><span class=\"hljs-params\">(Users u)</span> {\n        System.out.println(u);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;main&quot;</span>;\n    }\n}\n</code></div></pre>\n<ol start=\"3\">\n<li>动态占位符提交</li>\n</ol>\n<p><code>仅限于超链接或地址栏提交数据，它是一杠一值，一杠一大括号，使用@PathVariable注解来解析</code></p>\n<pre><div class=\"hljs\"><code class=\"lang-jsp\">&lt;h2&gt;<span class=\"hljs-number\">2.</span>动态占位符提交&lt;/h2&gt;\n&lt;a href=<span class=\"hljs-string\">&quot;${pageContext.request.contextPath}/three/张三/22.action&quot;</span>&gt;动态提交&lt;/a&gt;\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Controller</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSubmitAction</span> {\n\n    <span class=\"hljs-meta\">@RequestMapping(&quot;three/{name}/{age}.action&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">three</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable(&quot;name&quot;)</span> String name,\n                        <span class=\"hljs-meta\">@PathVariable(&quot;age&quot;)</span> <span class=\"hljs-type\">int</span> age)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;name=&quot;</span> + name + <span class=\"hljs-string\">&quot;,age=&quot;</span> + age);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;main&quot;</span>;\n    }\n}\n</code></div></pre>\n<ol start=\"4\">\n<li>\n<p>映射名称不一致</p>\n<p>提交请求参数与action方法的形参的名称不一致，使用注解@RequestParam来解析</p>\n<pre><div class=\"hljs\"><code class=\"lang-jsp\">&lt;h4&gt;<span class=\"hljs-number\">4.</span>参数名称不一致解决方案&lt;/h4&gt;\n&lt;form action=<span class=\"hljs-string\">&quot;${pageContext.request.contextPath}/four.action&quot;</span>&gt;\n    name:&lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> name=<span class=\"hljs-string\">&quot;name&quot;</span>/&gt;\n    age:&lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> name=<span class=\"hljs-string\">&quot;age&quot;</span>/&gt;\n    &lt;input type=<span class=\"hljs-string\">&quot;submit&quot;</span> value=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;\n&lt;/form&gt;\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.lzh.controller;\n\n<span class=\"hljs-keyword\">import</span> com.lzh.Users;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;\n\n<span class=\"hljs-meta\">@Controller</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSubmitAction</span> {\n\n    <span class=\"hljs-comment\">/**\n     * name:&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;\n     * age:&lt;input type=&quot;text&quot; name=&quot;age&quot;/&gt;\n     *\n     * <span class=\"hljs-doctag\">@param</span> uname\n     * <span class=\"hljs-doctag\">@param</span> uage\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@RequestMapping(&quot;/four.action&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">four</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(&quot;name&quot;)</span> String uname,\n                       <span class=\"hljs-meta\">@RequestParam(&quot;age&quot;)</span> <span class=\"hljs-type\">int</span> uage)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;uname=&quot;</span> + uname + <span class=\"hljs-string\">&quot;,uage=&quot;</span> + uage);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;main&quot;</span>;\n    }\n}\n</code></div></pre>\n</li>\n<li>\n<p>手工提取数据（了解）</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">request.getParameter(<span class=\"hljs-string\">&quot;&quot;</span>);\n</code></div></pre>\n</li>\n</ol>\n<h1><a id=\"_376\"></a>六、中文编码过滤器</h1>\n<ul>\n<li>web.xml</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-comment\">&lt;!--中文编码过滤器配置--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>encode<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-class</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--\n        配置参数\n        private String encoding;\n        private boolean forceRequestEncoding;\n        private boolean forceResponseEncoding;\n    --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">init-param</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-name</span>&gt;</span>encoding<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-name</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-value</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-value</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">init-param</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">init-param</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-name</span>&gt;</span>forceRequestEncoding<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-name</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-value</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-value</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">init-param</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">init-param</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-name</span>&gt;</span>forceResponseEncoding<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-name</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-value</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-value</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">init-param</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-mapping</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>encode<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-mapping</span>&gt;</span>\n</code></div></pre>\n<h1><a id=\"action_410\"></a>七、action方法的返回值</h1>\n<ol>\n<li>String：客户端资源的地址，自动拼接前缀和后缀，还可以屏蔽自动拼接字符串，可以指定返回的路径</li>\n<li>Object：返回json格式的对象，自动将对象或集合转为json，使用的jackson工具进行转换，必须要添加jackson依赖，一般用于ajax请求</li>\n<li>void：无返回值，一般用于ajax请求</li>\n<li>基本数据类型：用于ajax请求</li>\n<li>ModelAndView：返回数据和视图</li>\n</ol>\n<h1><a id=\"ajax_418\"></a>八、完成ajax请求访问服务器，返回学生集合</h1>\n<ol>\n<li>添加jackson依赖</li>\n<li>在webapp目录下新建js目录，添加jQuery函数库</li>\n<li>在index.jsp页面上导入函数库</li>\n<li>在action上添加注解@ResponseBody，用来处理ajax请求</li>\n<li>在springmvc.xml文件中添加注解驱动 &lt;mvc:annotationdriven /&gt; ,它用来解析@ResponseBody注解</li>\n</ol>\n', '# 一、什么是SpringMVC\r\n\r\n> 它是基于MVC开发模式的框架，用来优化控制器，它是Spring家族的一员，它也具备IOC和AOP\r\n\r\n## 1.1 什么是MVC？\r\n\r\n> 它是一种开发模式，它是模型视图控制器的简称，所有的web应用都是基于MVC开发\r\n\r\n- M：模型层，包含实体类，业务逻辑层，数据访问层\r\n- V：视图层，html，JavaScript等都是视图层，用来显现数据\r\n- C：控制器，它是用来接收客户端的请求，并返回响应到客户端的组件，Servlet就是组件\r\n\r\n## 1.2 SpringMVC框架的优点\r\n\r\n- 轻量级，基于MVC的框架\r\n- 易于上手，容易理解，功能强大\r\n- 具备IOC和AOP\r\n- 完全基于注解开发\r\n\r\n# 二、基于注解的SpringMVC框架开发的步骤\r\n\r\n1. 新建项目，选择webapp模板\r\n\r\n2. 修改目录，添加缺失的test,java,resources（两套），并修改目录属性\r\n\r\n   ![image-20220425193207736](http://1.117.218.230:9000/test/img_image-202204251932077361685189858847.png)\r\n\r\n3. 修改pom.xml文件，添加SpringMVC的依赖，添加Servlet的依赖\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   \r\n   <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n     xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n     <modelVersion>4.0.0</modelVersion>\r\n   \r\n     <groupId>com.lzh</groupId>\r\n     <artifactId>demo01</artifactId>\r\n     <version>1.0-SNAPSHOT</version>\r\n     <packaging>war</packaging>\r\n   \r\n     <properties>\r\n       <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n       <maven.compiler.source>1.8</maven.compiler.source>\r\n       <maven.compiler.target>1.8</maven.compiler.target>\r\n     </properties>\r\n   \r\n     <dependencies>\r\n       <dependency>\r\n         <groupId>junit</groupId>\r\n         <artifactId>junit</artifactId>\r\n         <version>4.11</version>\r\n         <scope>test</scope>\r\n       </dependency>\r\n   \r\n       <!--springmvc的依赖-->\r\n       <dependency>\r\n         <groupId>org.springframework</groupId>\r\n         <artifactId>spring-webmvc</artifactId>\r\n         <version>5.3.18</version>\r\n       </dependency>\r\n       <!--servlet的依赖-->\r\n       <dependency>\r\n         <groupId>javax.servlet</groupId>\r\n         <artifactId>javax.servlet-api</artifactId>\r\n         <version>4.0.1</version>\r\n       </dependency>\r\n   \r\n     </dependencies>\r\n   \r\n     <build>\r\n       <resources>\r\n         <resource>\r\n           <directory>src/main/java</directory>\r\n           <includes>\r\n             <include>**/*.xml</include>\r\n             <include>**/*.properties</include>\r\n           </includes>\r\n         </resource>\r\n         <resource>\r\n           <directory>src/main/resources</directory>\r\n           <includes>\r\n             <include>**/*.xml</include>\r\n             <include>**/*.properties</include>\r\n           </includes>\r\n         </resource>\r\n       </resources>\r\n     </build>\r\n   </project>\r\n   ```\r\n\r\n4. 添加springmvc.xml配置文件，指定包扫描，添加视图解析器\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xmlns:context=\"http://www.springframework.org/schema/context\"\r\n          xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\">\r\n   \r\n       <!--添加包扫描-->\r\n       <context:component-scan base-package=\"com.lzh.controller\"></context:component-scan>\r\n       <!--添加添加视图解析器-->\r\n       <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n           <!--配置前缀-->\r\n           <property name=\"prefix\" value=\"/admin/\"></property>\r\n           <!--配置后缀-->\r\n           <property name=\"suffix\" value=\".jsp\"></property>\r\n       </bean>\r\n   </beans>\r\n   ```\r\n\r\n5. 删除web.xml文件，新建web.xml\r\n\r\n6. 在web.xml文件中注册springmvc框架（所有的web请求都是基于servlet的）\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\r\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n            xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\r\n            version=\"4.0\">\r\n   \r\n       <!--注册SpringMVC框架-->\r\n       <servlet>\r\n           <servlet-name>springmvc</servlet-name>\r\n           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n           <init-param>\r\n               <param-name>contextConfigLocation</param-name>\r\n               <param-value>classpath:springmvc.xml</param-value>\r\n           </init-param>\r\n       </servlet>\r\n       <servlet-mapping>\r\n           <servlet-name>springmvc</servlet-name>\r\n           <!--\r\n               指定拦截什么样的请求\r\n               http://localhost:8080/one\r\n               http://localhost:8080/index.jsp\r\n               http://localhost:8080/demo.action\r\n               <a href=\"${pageContext.request.contextPath}/demo.action\">访问服务器</a>\r\n           -->\r\n           <url-pattern>*.action</url-pattern>\r\n       </servlet-mapping>\r\n   </web-app>\r\n   ```\r\n\r\n   \r\n\r\n7. 在webapp目录下新建admin目录，在admin目录下新建main.jsp页面，删除index.jsp页面，并新建，发送请求给服务器\r\n\r\n   - index.jsp\r\n\r\n   ```jsp\r\n   <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n   <html>\r\n   <head>\r\n       <title>Title</title>\r\n   </head>\r\n   <body>\r\n   <br><br><br>\r\n   <a href=\"${pageContext.request.contextPath}/demo.action\">访问服务器</a>\r\n   </body>\r\n   </html>\r\n   ```\r\n\r\n8. 开发控制器（Servlet），它是一个普通的类\r\n\r\n   ```java\r\n   @Controller //交给Spring去创建对象\r\n   public class DemoAction {\r\n       /**\r\n        * action中所有的功能实现都是由方法来完成的\r\n        * action方法的规范\r\n        * 1.访问权限是public\r\n        * 2.方法的返回值任意\r\n        * 3.方法名称任意\r\n        * 4.方法可以没有参数，如果有可以是任意类型\r\n        * 5.要使用@RequestMapping注解来声明一个访问的路径（名称）\r\n        */\r\n       @RequestMapping(\"/demo.action\")\r\n       public String demo() {\r\n           System.out.println(\"服务器被访问到了\");\r\n           return \"main\"; //可以直接跳到/admin/main.jsp页面上\r\n       }\r\n   }\r\n   \r\n   ```\r\n\r\n   \r\n\r\n9. 添加tomcat进行测试功能\r\n\r\n# 三、分析web请求\r\n\r\nweb请求执行的流程\r\n\r\n​								   		核心处理器\r\n\r\nindex.jsp<---------------->DispatcherServlet<--------------------->SpringMVC的处理器是一个普通的方法\r\n\r\none.jsp<---------------->DispatcherServlet<--------------------->SpringMVC的处理器是一个普通的方法\r\n\r\nDispatcherServlet要在web.xml文件中注册才可用\r\n\r\n# 四、@RequestMapping注解\r\n\r\n> 此注解就是来映射服务器访问的路径\r\n\r\n1. 此注解可加在方法上，是为此方法注册一个可以访问的名称(路径)\r\n\r\n2. 此注解可以加在类上，相当于是包名(虚拟路径)，区分不同类中相同的action的名称\r\n\r\n   ```java\r\n   @RequestMapping(\"/user\")\r\n   public class DemoAction {...}\r\n   ```\r\n\r\n   ```html\r\n   <a href=\"${pageContext.request.contextPath}/user/demo.action\">访问服务器</a>\r\n   ```\r\n\r\n3. 此注解可区分get请求和post请求\r\n\r\n   ```java\r\n   @Controller\r\n   public class ReqAction {\r\n   \r\n       @RequestMapping(value = \"/req.action\", method = RequestMethod.GET)\r\n       public String req() {\r\n           System.out.println(\"get请求.....\");\r\n           return \"main\";\r\n       }\r\n   \r\n       @RequestMapping(value = \"/req.action\", method = RequestMethod.POST)\r\n       public String req1() {\r\n           System.out.println(\"post请求.....\");\r\n           return \"main\";\r\n       }\r\n   }\r\n   ```\r\n\r\n# 五、五种数据提交方式的优化\r\n\r\n1. 散提交数据\r\n\r\n  index.jsp\r\n\r\n  ```jsp\r\n  <h2>1.单个数据提交</h2>\r\n  <form action=\"${pageContext.request.contextPath}/one.action\">\r\n      name:<input type=\"text\" name=\"myname\"/>\r\n      age:<input type=\"text\" name=\"age\"/>\r\n      <input type=\"submit\" value=\"提交\">\r\n  </form>\r\n  ```\r\n\r\n  DataSubmitAction.java\r\n\r\n  ```java\r\n  @Controller\r\n  public class DataSubmitAction {\r\n  \r\n      @RequestMapping(\"/one.action\")\r\n      public String one(String myname, int age) { //自动注入，并且类型转换\r\n          System.out.println(\"myname=\" + myname + \",age=\" + (age + 100));\r\n          return \"main\";\r\n      }\r\n  }\r\n  ```\r\n\r\n2. 对象封装提交数据\r\n\r\n  `在提交请求中，保证请求参数的名称与实体类中成员变量的名称一致，则可以自动创建对象，自动提交数据，自动类型转换，自动封装数据到对象中`\r\n\r\n  ```java\r\n  @Data\r\n  @AllArgsConstructor\r\n  @NoArgsConstructor\r\n  public class Users {\r\n  \r\n      private String name;\r\n      private int age;\r\n  }\r\n  ```\r\n\r\n  ```html\r\n  <h2>2.对象封装数据提交</h2>\r\n  <form action=\"${pageContext.request.contextPath}/two.action\">\r\n      name:<input type=\"text\" name=\"name\"/>\r\n      age:<input type=\"text\" name=\"age\"/>\r\n      <input type=\"submit\" value=\"提交\">\r\n  </form>\r\n  ```\r\n\r\n  ```java\r\n  @Controller\r\n  public class DataSubmitAction {\r\n  \r\n      @RequestMapping(\"/two.action\")\r\n      public String two(Users u) {\r\n          System.out.println(u);\r\n          return \"main\";\r\n      }\r\n  }\r\n  ```\r\n\r\n3. 动态占位符提交\r\n\r\n  `仅限于超链接或地址栏提交数据，它是一杠一值，一杠一大括号，使用@PathVariable注解来解析`\r\n\r\n  ```jsp\r\n  <h2>2.动态占位符提交</h2>\r\n  <a href=\"${pageContext.request.contextPath}/three/张三/22.action\">动态提交</a>\r\n  ```\r\n\r\n  ```java\r\n  @Controller\r\n  public class DataSubmitAction {\r\n  \r\n      @RequestMapping(\"three/{name}/{age}.action\")\r\n      public String three(@PathVariable(\"name\") String name,\r\n                          @PathVariable(\"age\") int age) {\r\n          System.out.println(\"name=\" + name + \",age=\" + age);\r\n          return \"main\";\r\n      }\r\n  }\r\n  ```\r\n\r\n4. 映射名称不一致\r\n\r\n   提交请求参数与action方法的形参的名称不一致，使用注解@RequestParam来解析\r\n\r\n   ```jsp\r\n   <h4>4.参数名称不一致解决方案</h4>\r\n   <form action=\"${pageContext.request.contextPath}/four.action\">\r\n       name:<input type=\"text\" name=\"name\"/>\r\n       age:<input type=\"text\" name=\"age\"/>\r\n       <input type=\"submit\" value=\"提交\">\r\n   </form>\r\n   ```\r\n\r\n   ```java\r\n   package com.lzh.controller;\r\n   \r\n   import com.lzh.Users;\r\n   import org.springframework.stereotype.Controller;\r\n   import org.springframework.web.bind.annotation.PathVariable;\r\n   import org.springframework.web.bind.annotation.RequestMapping;\r\n   import org.springframework.web.bind.annotation.RequestParam;\r\n   \r\n   @Controller\r\n   public class DataSubmitAction {\r\n   \r\n       /**\r\n        * name:<input type=\"text\" name=\"name\"/>\r\n        * age:<input type=\"text\" name=\"age\"/>\r\n        *\r\n        * @param uname\r\n        * @param uage\r\n        * @return\r\n        */\r\n       @RequestMapping(\"/four.action\")\r\n       public String four(@RequestParam(\"name\") String uname,\r\n                          @RequestParam(\"age\") int uage) {\r\n           System.out.println(\"uname=\" + uname + \",uage=\" + uage);\r\n           return \"main\";\r\n       }\r\n   }\r\n   ```\r\n\r\n5. 手工提取数据（了解）\r\n\r\n   ```java\r\n   request.getParameter(\"\");\r\n   ```\r\n\r\n# 六、中文编码过滤器\r\n\r\n- web.xml\r\n\r\n```xml\r\n<!--中文编码过滤器配置-->\r\n<filter>\r\n    <filter-name>encode</filter-name>\r\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\r\n    <!--\r\n        配置参数\r\n        private String encoding;\r\n        private boolean forceRequestEncoding;\r\n        private boolean forceResponseEncoding;\r\n    -->\r\n    <init-param>\r\n        <param-name>encoding</param-name>\r\n        <param-value>UTF-8</param-value>\r\n    </init-param>\r\n    <init-param>\r\n        <param-name>forceRequestEncoding</param-name>\r\n        <param-value>true</param-value>\r\n    </init-param>\r\n    <init-param>\r\n        <param-name>forceResponseEncoding</param-name>\r\n        <param-value>true</param-value>\r\n    </init-param>\r\n</filter>\r\n<filter-mapping>\r\n    <filter-name>encode</filter-name>\r\n    <url-pattern>/*</url-pattern>\r\n</filter-mapping>\r\n```\r\n\r\n# 七、action方法的返回值\r\n\r\n1. String：客户端资源的地址，自动拼接前缀和后缀，还可以屏蔽自动拼接字符串，可以指定返回的路径\r\n2. Object：返回json格式的对象，自动将对象或集合转为json，使用的jackson工具进行转换，必须要添加jackson依赖，一般用于ajax请求\r\n3. void：无返回值，一般用于ajax请求\r\n4. 基本数据类型：用于ajax请求\r\n5. ModelAndView：返回数据和视图\r\n\r\n# 八、完成ajax请求访问服务器，返回学生集合\r\n\r\n1. 添加jackson依赖\r\n2. 在webapp目录下新建js目录，添加jQuery函数库\r\n3. 在index.jsp页面上导入函数库\r\n4. 在action上添加注解@ResponseBody，用来处理ajax请求\r\n5. 在springmvc.xml文件中添加注解驱动 <mvc:annotationdriven /> ,它用来解析@ResponseBody注解', 'SpringMVC', 20, 'http://1.117.218.230:9000/test/img_1685189931970.jpg', '0', '0', 6, 1, 0, 0, '1', 1, '2023-05-27 20:17:45', 1, '2023-06-01 15:10:43', 0);
INSERT INTO `lzh_article` VALUES (1663466784667443201, 'Spring Boot集成过滤器', '<h1><a id=\"Spring_Boot_0\"></a>Spring Boot集成过滤器</h1>\n<h2><a id=\"SpringBoot_2\"></a>SpringBoot过滤器中异常处理无效解决方案</h2>\n<blockquote>\n<p>参考：https://blog.csdn.net/zhang19903848257/article/details/111414675</p>\n</blockquote>\n<h2><a id=\"springBoot_6\"></a>springBoot使用过滤器验证登录</h2>\n<blockquote>\n<p>参考：https://blog.csdn.net/raintempest/article/details/126939886</p>\n</blockquote>\n', '# Spring Boot集成过滤器\n\n## SpringBoot过滤器中异常处理无效解决方案\n\n> 参考：https://blog.csdn.net/zhang19903848257/article/details/111414675\n\n## springBoot使用过滤器验证登录\n\n> 参考：https://blog.csdn.net/raintempest/article/details/126939886\n\n', 'Spring Boot集成过滤器', 15, 'http://1.117.218.230:9000/test/img_1685436355857.png', '0', '0', 1, 0, 0, 1, '1', 1, '2023-05-30 16:46:02', NULL, '2023-05-30 18:19:58', 0);
INSERT INTO `lzh_article` VALUES (1663467371689648129, 'quartz定时任务框架使⽤', '<h1><a id=\"quartz_0\"></a>quartz定时任务框架使⽤</h1>\n<h2><a id=\"1_2\"></a>1.添加依赖</h2>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<h2><a id=\"2_11\"></a>2.创建定时任务</h2>\n<blockquote>\n<p>定时任务，每隔指定的时间就执行一次任务</p>\n<p>案例：每隔3s就打印一次HelloWorld</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrintHelloWorldJob</span> {\n    <span class=\"hljs-comment\">//https://cron.qqe2.com  在线Cron表达式生成器</span>\n    <span class=\"hljs-meta\">@Scheduled(cron = &quot;0/3 * * * * ?&quot;)</span> <span class=\"hljs-comment\">//从第0秒开始，每隔3秒执行一次方法【?后面的*不要加】</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printHelloWorld</span><span class=\"hljs-params\">()</span>{\n        System.out.println(<span class=\"hljs-string\">&quot;----hello world.&quot;</span>);\n    }\n}\n</code></div></pre>\n<h2><a id=\"3_EnableScheduling_28\"></a>3.在启动类开启定时任务 @EnableScheduling</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@EnableScheduling</span>\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">QuartzDemoApplication</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        SpringApplication.run(QuartzDemoApplication.class, args);\n    }\n}\n</code></div></pre>\n', '# quartz定时任务框架使⽤\n\n## 1.添加依赖\n\n```xml\n<dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-quartz</artifactId>\n</dependency>\n```\n\n## 2.创建定时任务\n\n> 定时任务，每隔指定的时间就执行一次任务\n>\n> 案例：每隔3s就打印一次HelloWorld\n\n```java\n@Component\npublic class PrintHelloWorldJob {\n    //https://cron.qqe2.com  在线Cron表达式生成器\n    @Scheduled(cron = \"0/3 * * * * ?\") //从第0秒开始，每隔3秒执行一次方法【?后面的*不要加】\n    public void printHelloWorld(){\n        System.out.println(\"----hello world.\");\n    }\n}\n```\n\n## 3.在启动类开启定时任务 @EnableScheduling\n\n```java\n@EnableScheduling\n@SpringBootApplication\npublic class QuartzDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(QuartzDemoApplication.class, args);\n    }\n}\n```\n\n', 'quartz定时任务框架使⽤', 1, 'http://1.117.218.230:9000/test/img_1685436498742.jpg', '0', '0', 1, 0, 0, 1, '1', 1, '2023-05-30 16:48:22', NULL, '2023-05-30 18:17:38', 0);
INSERT INTO `lzh_article` VALUES (1663468503749074946, '天气接口文档', '<h1><a id=\"_0\"></a>天气接口文档</h1>\n<blockquote>\n<p>接口文档：https://openweathermap.org/current</p>\n</blockquote>\n<h2><a id=\"My_API_key_4\"></a>My API key</h2>\n<blockquote>\n<p>个人中心获取</p>\n</blockquote>\n<p>db40d83f91389fcf254fb33389009fcc</p>\n<h2><a id=\"_10\"></a>根据经纬度获取天气</h2>\n<blockquote>\n<p>文档：https://openweathermap.org/current</p>\n<p>注意：要加上&amp;units=metric，设置温度显示标准</p>\n</blockquote>\n<p>接口：https://api.openweathermap.org/data/2.5/weather?lat=39.906217&amp;lon=116.3912757&amp;appid=db40d83f91389fcf254fb33389009fcc&amp;units=metric</p>\n<h2><a id=\"_18\"></a>根据城市名称获取经纬度坐标</h2>\n<blockquote>\n<p>文档：https://openweathermap.org/api/geocoding-api</p>\n</blockquote>\n<p>接口：http://api.openweathermap.org/geo/1.0/direct?q=北京&amp;appid=db40d83f91389fcf254fb33389009fcc</p>\n<h2><a id=\"_24\"></a>获取天气图标</h2>\n<blockquote>\n<p>文档：https://openweathermap.org/weather-conditions</p>\n</blockquote>\n<p>接口：https://openweathermap.org/img/wn/10d@2x.png</p>\n<h2><a id=\"_30\"></a>案例</h2>\n<pre><code class=\"lang-vue\">&lt;template&gt;\n  &lt;div class=&quot;search&quot;&gt;\n    &lt;input type=&quot;text&quot; placeholder=&quot;请输入城市名字&quot; spellCheck=&quot;false&quot; v-model=&quot;cityName&quot;&gt;\n    &lt;button @click=&quot;search&quot;&gt;&lt;img src=&quot;../assets/images/search.png&quot;&gt;&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport axios from \'axios\'\n\nexport default {\n  name: \'Search\',\n  data() {\n    return {\n      cityName: \'\'\n    }\n  },\n  methods: {\n    search() {\n      // 必须输入城市的名字，如果城市名为空，则不做任何反馈\n      if (!this.cityName.trim()) return\n      // 发送AJAX请求，根据城市的名字获取纬度和经度\n      const apiKey = &quot;78b262ed7919f0d79a2ca50a4a6f82bf&quot;\n      // 使用ES6的模板语法进行字符串的拼接。\n      const apiUrlGetLatAndLon = `http://api.openweathermap.org/geo/1.0/direct?q=${this.cityName}&amp;appid=${apiKey}`\n      axios.get(apiUrlGetLatAndLon).then(\n          response =&gt; {\n            console.log(\'响应数据：\', response.data)\n            if (!response.data.length) {\n              // 触发事件，传递数据给Weather组件\n              this.$bus.$emit(\'displayNotFound\', true)\n            } else {\n              // 获取纬度和经度\n              const lat = response.data[0].lat\n              console.log(\'纬度\', lat)\n              const lon = response.data[0].lon\n              console.log(\'经度\', lon)\n              // 再发送一次AJAX请求，调用接口，根据纬度和经度获取天气信息\n              const apiUrlGetWeather = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&amp;lon=${lon}&amp;appid=${apiKey}&amp;units=metric`\n              axios.get(apiUrlGetWeather).then(\n                  response =&gt; {\n                    console.log(\'响应数据：\', response.data)\n                    // 从响应的数据当中获取我们需要的信息：温度、湿度、风速、天气图标\n                    // 将获取到的需要的数据封装成一个weather对象，传递给Weather组件\n                    const weather = {\n                      // 天气图片路径\n                      imgPath: `https://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`,\n                      // 温度\n                      temp: response.data.main.temp,\n                      // 湿度\n                      humidity: response.data.main.humidity,\n                      // 风速\n                      windSpeed: response.data.wind.speed,\n                      // 城市名\n                      city: this.cityName,\n                      // 是否展示Weather组件\n                      isShow: true\n                    }\n                    // 触发事件(使用全局事件总线)，传递数据\n                    this.$bus.$emit(\'displayWeather\', weather, false)\n                  },\n                  error =&gt; {\n                    console.log(\'错误信息为：\', error.message)\n                  }\n              )\n            }\n          },\n          error =&gt; {\n            console.log(\'错误信息为：\', error.message)\n          }\n      )\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;css&quot; scoped&gt;\n/*搜索框样式*/\n.search {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.search input {\n  border: 0;\n  outline: 0;\n  background: #ebfffc;\n  color: #555;\n  padding: 10px 25px;\n  height: 60px;\n  border-radius: 30px;\n  flex: 1;\n  margin-right: 16px;\n  font-size: 18px;\n}\n\n.search button {\n  border: 0;\n  outline: 0;\n  background: #ebfffc;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  cursor: pointer;\n}\n\n.search button img {\n  width: 16px;\n}\n&lt;/style&gt;\n</code></pre>\n', '# 天气接口文档\n\n> 接口文档：https://openweathermap.org/current\n\n## My API key\n\n> 个人中心获取\n\ndb40d83f91389fcf254fb33389009fcc\n\n## 根据经纬度获取天气\n\n> 文档：https://openweathermap.org/current\n>\n> 注意：要加上&units=metric，设置温度显示标准\n\n接口：https://api.openweathermap.org/data/2.5/weather?lat=39.906217&lon=116.3912757&appid=db40d83f91389fcf254fb33389009fcc&units=metric\n\n## 根据城市名称获取经纬度坐标\n\n> 文档：https://openweathermap.org/api/geocoding-api\n\n接口：http://api.openweathermap.org/geo/1.0/direct?q=北京&appid=db40d83f91389fcf254fb33389009fcc\n\n## 获取天气图标\n\n> 文档：https://openweathermap.org/weather-conditions\n\n接口：https://openweathermap.org/img/wn/10d@2x.png\n\n## 案例\n\n```vue\n<template>\n  <div class=\"search\">\n    <input type=\"text\" placeholder=\"请输入城市名字\" spellCheck=\"false\" v-model=\"cityName\">\n    <button @click=\"search\"><img src=\"../assets/images/search.png\"></button>\n  </div>\n</template>\n\n<script>\nimport axios from \'axios\'\n\nexport default {\n  name: \'Search\',\n  data() {\n    return {\n      cityName: \'\'\n    }\n  },\n  methods: {\n    search() {\n      // 必须输入城市的名字，如果城市名为空，则不做任何反馈\n      if (!this.cityName.trim()) return\n      // 发送AJAX请求，根据城市的名字获取纬度和经度\n      const apiKey = \"78b262ed7919f0d79a2ca50a4a6f82bf\"\n      // 使用ES6的模板语法进行字符串的拼接。\n      const apiUrlGetLatAndLon = `http://api.openweathermap.org/geo/1.0/direct?q=${this.cityName}&appid=${apiKey}`\n      axios.get(apiUrlGetLatAndLon).then(\n          response => {\n            console.log(\'响应数据：\', response.data)\n            if (!response.data.length) {\n              // 触发事件，传递数据给Weather组件\n              this.$bus.$emit(\'displayNotFound\', true)\n            } else {\n              // 获取纬度和经度\n              const lat = response.data[0].lat\n              console.log(\'纬度\', lat)\n              const lon = response.data[0].lon\n              console.log(\'经度\', lon)\n              // 再发送一次AJAX请求，调用接口，根据纬度和经度获取天气信息\n              const apiUrlGetWeather = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n              axios.get(apiUrlGetWeather).then(\n                  response => {\n                    console.log(\'响应数据：\', response.data)\n                    // 从响应的数据当中获取我们需要的信息：温度、湿度、风速、天气图标\n                    // 将获取到的需要的数据封装成一个weather对象，传递给Weather组件\n                    const weather = {\n                      // 天气图片路径\n                      imgPath: `https://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`,\n                      // 温度\n                      temp: response.data.main.temp,\n                      // 湿度\n                      humidity: response.data.main.humidity,\n                      // 风速\n                      windSpeed: response.data.wind.speed,\n                      // 城市名\n                      city: this.cityName,\n                      // 是否展示Weather组件\n                      isShow: true\n                    }\n                    // 触发事件(使用全局事件总线)，传递数据\n                    this.$bus.$emit(\'displayWeather\', weather, false)\n                  },\n                  error => {\n                    console.log(\'错误信息为：\', error.message)\n                  }\n              )\n            }\n          },\n          error => {\n            console.log(\'错误信息为：\', error.message)\n          }\n      )\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n/*搜索框样式*/\n.search {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.search input {\n  border: 0;\n  outline: 0;\n  background: #ebfffc;\n  color: #555;\n  padding: 10px 25px;\n  height: 60px;\n  border-radius: 30px;\n  flex: 1;\n  margin-right: 16px;\n  font-size: 18px;\n}\n\n.search button {\n  border: 0;\n  outline: 0;\n  background: #ebfffc;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  cursor: pointer;\n}\n\n.search button img {\n  width: 16px;\n}\n</style>\n```\n\n', '天气接口文档', 1, 'http://1.117.218.230:9000/test/img_1685436763143.jpg', '0', '0', 3, 1, 0, 0, '1', 1, '2023-05-30 16:52:52', NULL, '2023-08-11 17:24:47', 0);
INSERT INTO `lzh_article` VALUES (1663468889046228993, '全局异常处理', '<h1><a id=\"_0\"></a>全局异常处理</h1>\n<h3><a id=\"1_2\"></a>1、统一异常处理</h3>\n<h4><a id=\"11_4\"></a>1.1、制造异常</h4>\n<p><strong>除以0</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>/<span class=\"hljs-number\">0</span>;\n</code></div></pre>\n<p>我们想让异常结果也显示为统一的返回结果对象，并且统一处理系统的异常信息，那么需要统一异常处理。</p>\n<h4><a id=\"12_14\"></a>1.2、全局异常处理</h4>\n<h5><a id=\"121_16\"></a>1.2.1、创建统一异常处理器</h5>\n<p>操作模块：service-util</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.atguigu.system.handler;\n\n<span class=\"hljs-keyword\">import</span> com.atguigu.common.result.Result;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ControllerAdvice;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ExceptionHandler;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;\n\n\n<span class=\"hljs-comment\">/**\n * 全局异常处理类\n *\n */</span>\n<span class=\"hljs-meta\">@ControllerAdvice</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GlobalExceptionHandler</span> {\n\n    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span>\n    <span class=\"hljs-meta\">@ResponseBody</span>\n    <span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">(Exception e)</span>{\n        e.printStackTrace();\n        <span class=\"hljs-keyword\">return</span> Result.fail();\n    }\n}\n</code></div></pre>\n<h4><a id=\"13_45\"></a>1.3、处理特定异常</h4>\n<h5><a id=\"131_47\"></a>1.3.1、添加异常处理方法</h5>\n<p><strong>GlobalExceptionHandler.java中添加</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@ExceptionHandler(ArithmeticException.class)</span>\n<span class=\"hljs-meta\">@ResponseBody</span>\n<span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">(ArithmeticException e)</span>{\n	e.printStackTrace();\n	<span class=\"hljs-keyword\">return</span> Result.fail().message(<span class=\"hljs-string\">&quot;执行了特定异常处理&quot;</span>);\n}\n</code></div></pre>\n<h5><a id=\"132_60\"></a>1.3.2、测试</h5>\n<h4><a id=\"14_64\"></a>1.4、处理自定义异常</h4>\n<h5><a id=\"141_66\"></a>1.4.1、创建自定义异常类</h5>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.atguigu.system.execption;\n\n<span class=\"hljs-keyword\">import</span> com.atguigu.common.result.ResultCodeEnum;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n\n<span class=\"hljs-comment\">/**\n * 自定义全局异常类\n *\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GuiguException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RuntimeException</span> {\n\n    <span class=\"hljs-keyword\">private</span> Integer code;\n\n    <span class=\"hljs-keyword\">private</span> String message;\n\n    <span class=\"hljs-comment\">/**\n     * 通过状态码和错误消息创建异常对象\n     * <span class=\"hljs-doctag\">@param</span> code\n     * <span class=\"hljs-doctag\">@param</span> message\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">GuiguException</span><span class=\"hljs-params\">(Integer code, String message)</span> {\n        <span class=\"hljs-built_in\">super</span>(message);\n        <span class=\"hljs-built_in\">this</span>.code = code;\n        <span class=\"hljs-built_in\">this</span>.message = message;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 接收枚举类型对象\n     * <span class=\"hljs-doctag\">@param</span> resultCodeEnum\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">GuiguException</span><span class=\"hljs-params\">(ResultCodeEnum resultCodeEnum)</span> {\n        <span class=\"hljs-built_in\">super</span>(resultCodeEnum.getMessage());\n        <span class=\"hljs-built_in\">this</span>.code = resultCodeEnum.getCode();\n        <span class=\"hljs-built_in\">this</span>.message = resultCodeEnum.getMessage();\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;GuliException{&quot;</span> +\n                <span class=\"hljs-string\">&quot;code=&quot;</span> + code +\n                <span class=\"hljs-string\">&quot;, message=&quot;</span> + <span class=\"hljs-built_in\">this</span>.getMessage() +\n                <span class=\"hljs-string\">&#x27;}&#x27;</span>;\n    }\n}\n\n</code></div></pre>\n<h5><a id=\"142_117\"></a>1.4.2、业务中需要位置抛出</h5>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>/<span class=\"hljs-number\">0</span>;\n}<span class=\"hljs-keyword\">catch</span>(Exception e) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GuiguException</span>(<span class=\"hljs-number\">20001</span>,<span class=\"hljs-string\">&quot;出现自定义异常&quot;</span>);\n}\n</code></div></pre>\n<h5><a id=\"143_127\"></a>1.4.3、添加异常处理方法</h5>\n<p><strong>GlobalExceptionHandler.java中添加</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@ExceptionHandler(GuiguException.class)</span>\n<span class=\"hljs-meta\">@ResponseBody</span>\n<span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">(GuiguException e)</span>{\n	e.printStackTrace();\n	<span class=\"hljs-keyword\">return</span> Result.fail().message(e.getMessage()).code(e.getCode());\n}\n</code></div></pre>\n', '# 全局异常处理\n\n### 1、统一异常处理\n\n#### 1.1、制造异常\n\n**除以0**\n\n```java\nint a = 10/0;\n```\n\n我们想让异常结果也显示为统一的返回结果对象，并且统一处理系统的异常信息，那么需要统一异常处理。\n\n#### 1.2、全局异常处理\n\n##### 1.2.1、创建统一异常处理器\n\n操作模块：service-util\n\n```java\npackage com.atguigu.system.handler;\n\nimport com.atguigu.common.result.Result;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n\n/**\n * 全局异常处理类\n *\n */\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(Exception.class)\n    @ResponseBody\n    public Result error(Exception e){\n        e.printStackTrace();\n        return Result.fail();\n    }\n}\n```\n\n#### 1.3、处理特定异常\n\n##### 1.3.1、添加异常处理方法 \n\n**GlobalExceptionHandler.java中添加**\n\n```java\n@ExceptionHandler(ArithmeticException.class)\n@ResponseBody\npublic Result error(ArithmeticException e){\n	e.printStackTrace();\n	return Result.fail().message(\"执行了特定异常处理\");\n}\n```\n\n##### 1.3.2、测试\n\n\n\n#### 1.4、处理自定义异常\n\n##### 1.4.1、创建自定义异常类\n\n```java\npackage com.atguigu.system.execption;\n\nimport com.atguigu.common.result.ResultCodeEnum;\nimport lombok.Data;\n\n/**\n * 自定义全局异常类\n *\n */\n@Data\npublic class GuiguException extends RuntimeException {\n\n    private Integer code;\n\n    private String message;\n\n    /**\n     * 通过状态码和错误消息创建异常对象\n     * @param code\n     * @param message\n     */\n    public GuiguException(Integer code, String message) {\n        super(message);\n        this.code = code;\n        this.message = message;\n    }\n\n    /**\n     * 接收枚举类型对象\n     * @param resultCodeEnum\n     */\n    public GuiguException(ResultCodeEnum resultCodeEnum) {\n        super(resultCodeEnum.getMessage());\n        this.code = resultCodeEnum.getCode();\n        this.message = resultCodeEnum.getMessage();\n    }\n\n    @Override\n    public String toString() {\n        return \"GuliException{\" +\n                \"code=\" + code +\n                \", message=\" + this.getMessage() +\n                \'}\';\n    }\n}\n\n```\n\n##### 1.4.2、业务中需要位置抛出\n\n```java\ntry {\n    int a = 10/0;\n}catch(Exception e) {\n    throw new GuiguException(20001,\"出现自定义异常\");\n}\n```\n\n##### 1.4.3、添加异常处理方法\n\n**GlobalExceptionHandler.java中添加**\n\n```java\n@ExceptionHandler(GuiguException.class)\n@ResponseBody\npublic Result error(GuiguException e){\n	e.printStackTrace();\n	return Result.fail().message(e.getMessage()).code(e.getCode());\n}\n```\n\n', '全局异常处理', 15, 'http://1.117.218.230:9000/test/img_1685436846253.jpg', '0', '0', 1, 0, 0, 1, '1', 1, '2023-05-30 16:54:24', NULL, '2023-05-30 18:21:48', 0);
INSERT INTO `lzh_article` VALUES (1663898715741589506, 'Spring中Bean的生命周期', '<h3><a id=\"SpringBean_0\"></a>Spring中Bean的生命周期？</h3>\n<ol>\n<li>实例化Bean</li>\n<li>给Bean属性赋值</li>\n<li>检查是否实现相关aware接口，如果有则执行相应的方法</li>\n<li>检查是否有BeanPostProcessor相关的对象，有则执行Bean后处理器的before前置方法</li>\n<li>检查是否实现InitializingBean接口，有则执行afterPropertiesSet()方法</li>\n<li>检查配置文件是否有init-method属性，有则执行指定的方法初始化Bean</li>\n<li>执行Bean后处理器的after后置方法</li>\n<li>使用Bean</li>\n<li>当销毁Bean时，检查是否实现了DisposableBean接口，有则执行destroy()方法</li>\n<li>当销毁Bean时，检查配置文件中是否定义 destroy-method属性，有则执行指定的方法。</li>\n</ol>\n', '### Spring中Bean的生命周期？\n\n1. 实例化Bean\n2. 给Bean属性赋值\n3. 检查是否实现相关aware接口，如果有则执行相应的方法\n4. 检查是否有BeanPostProcessor相关的对象，有则执行Bean后处理器的before前置方法\n5. 检查是否实现InitializingBean接口，有则执行afterPropertiesSet()方法\n6. 检查配置文件是否有init-method属性，有则执行指定的方法初始化Bean\n7. 执行Bean后处理器的after后置方法\n8. 使用Bean\n9. 当销毁Bean时，检查是否实现了DisposableBean接口，有则执行destroy()方法\n10. 当销毁Bean时，检查配置文件中是否定义 destroy-method属性，有则执行指定的方法。', 'Spring中Bean的生命周期？', 20, 'http://1.117.218.230:9000/test/img_1685539321364.jpg', '0', '0', 0, 0, 0, 0, '1', 1, '2023-05-31 21:22:22', NULL, '2023-05-31 21:22:22', 0);
INSERT INTO `lzh_article` VALUES (1663903522481082369, 'Docker容器之间的通信', '<h1><a id=\"Dockerdocker_0\"></a>Docker篇之docker容器之间的通信</h1>\n<blockquote>\n<p>参考：https://huaweicloud.csdn.net/63561cfcd3efff3090b5ac4a.html?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-2-126763873-blog-125562127.235%5Ev36%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-2-126763873-blog-125562127.235%5Ev36%5Epc_relevant_default_base&amp;utm_relevant_index=3</p>\n</blockquote>\n', '# Docker篇之docker容器之间的通信\n> 参考：https://huaweicloud.csdn.net/63561cfcd3efff3090b5ac4a.html?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-2-126763873-blog-125562127.235%5Ev36%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-2-126763873-blog-125562127.235%5Ev36%5Epc_relevant_default_base&utm_relevant_index=3', 'Docker篇之docker容器之间的通信', 1, 'http://1.117.218.230:9000/test/img_1685540311173.jpg', '0', '0', 1, 0, 0, 0, '1', 1, '2023-05-31 21:41:28', NULL, '2023-05-31 21:41:33', 0);
INSERT INTO `lzh_article` VALUES (1663903522481082370, 'Zookeeper', '<h1><a id=\"Zookeeper_0\"></a>Zookeeper</h1>\n<h2><a id=\"_2\"></a>官网下载</h2>\n<p>https://zookeeper.apache.org/releases.html</p>\n<h2><a id=\"1_6\"></a>1.多节点类型创建</h2>\n<h3><a id=\"_8\"></a>①创建持久节点</h3>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">create /节点\ncreate /test7\n</code></div></pre>\n<h3><a id=\"_15\"></a>②创建持久序号节点</h3>\n<pre><code class=\"lang-\">create -s /节点\n</code></pre>\n<h3><a id=\"_21\"></a>③创建子节点</h3>\n<pre><code class=\"lang-\">create /节点1/节点2\n</code></pre>\n<h3><a id=\"_27\"></a>④创建临时节点</h3>\n<pre><code class=\"lang-\">create -e /节点\n</code></pre>\n<h3><a id=\"_33\"></a>⑤创建临时序号节点</h3>\n<pre><code class=\"lang-\">create -e -s /节点\n</code></pre>\n<h2><a id=\"2_39\"></a>2.查询节点</h2>\n<ul>\n<li>普通查询</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-shell\"><span class=\"hljs-meta\">#</span><span class=\"language-bash\">查询根节点</span>\nls /\n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\">查询某个节点</span>\nls /节点1\n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\">查询该节点下的所有节点</span>\nls -R /节点\n</code></div></pre>\n<ul>\n<li>查询节点详细信息</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">获取该结点的数据</span>\nget /节点\n<span class=\"hljs-meta\">\n# </span><span class=\"language-bash\">获取该结点的详细信息</span>\nget -s /节点\n</code></div></pre>\n<h2><a id=\"3_64\"></a>3.删除节点</h2>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">delete /节点\n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\">删除不为空的节点</span>\ndeleteall /节点\n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\">乐观锁删除</span>\ndelete -v dataVersion /节点\n例：\ndelete -v 1 /test\n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\">查询版本号</span>\nls -s /节点    ----&gt; dataVersion\n</code></div></pre>\n<h2><a id=\"4_81\"></a>4.权限设置</h2>\n<pre><div class=\"hljs\"><code class=\"lang-shell\"><span class=\"hljs-meta\">#</span><span class=\"language-bash\">注册当前会话的账号和密码</span>\naddauth digest username:password\n<span class=\"hljs-meta\">#</span><span class=\"language-bash\">例如：</span>\naddauth digest xiaoming:123456\n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\">创建节点并设置权限</span>\ncreate /节点 数据 auth:username:password:操作权限\n<span class=\"hljs-meta\">#</span><span class=\"language-bash\">例如：</span>\ncreate /test-node abc auth:xiaoming:123456:cdwra\n</code></div></pre>\n<h2><a id=\"watch_95\"></a>watch节点监听机制</h2>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">create /test xxx #创建节点\nget -w /test #⼀次性监听节点\nls -w /test #监听⽬录,创建和删除⼦节点会收到通知。⼦节点中新增节点不会收到通知\nls -R -w /test #对于⼦节点中⼦节点的变化，但内容的变化不会收到通知\n</code></div></pre>\n<h2><a id=\"Javazk_104\"></a>Java客户端操作zk</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.lzh;\n\n<span class=\"hljs-keyword\">import</span> com.lzh.entity.User;\n<span class=\"hljs-keyword\">import</span> org.I0Itec.zkclient.IZkChildListener;\n<span class=\"hljs-keyword\">import</span> org.I0Itec.zkclient.IZkDataListener;\n<span class=\"hljs-keyword\">import</span> org.I0Itec.zkclient.ZkClient;\n<span class=\"hljs-keyword\">import</span> org.I0Itec.zkclient.serialize.SerializableSerializer;\n<span class=\"hljs-keyword\">import</span> org.apache.zookeeper.CreateMode;\n<span class=\"hljs-keyword\">import</span> org.apache.zookeeper.data.Stat;\n<span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.AfterAll;\n<span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.BeforeAll;\n<span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;\n\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n<span class=\"hljs-keyword\">import</span> java.util.Date;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-meta\">@SpringBootTest</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestZKClient</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ZkClient zkClient;\n\n    <span class=\"hljs-meta\">@BeforeAll</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">before</span><span class=\"hljs-params\">()</span> {\n        zkClient = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ZkClient</span>(<span class=\"hljs-string\">&quot;192.168.146.137:2181&quot;</span>, <span class=\"hljs-number\">60000</span> * <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">60000</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SerializableSerializer</span>());\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCreateNode</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-comment\">//1.持久节点</span>\n        zkClient.create(<span class=\"hljs-string\">&quot;/node1&quot;</span>, <span class=\"hljs-string\">&quot;xiaochen&quot;</span>, CreateMode.PERSISTENT);\n        <span class=\"hljs-comment\">//2.持久顺序节点</span>\n        zkClient.create(<span class=\"hljs-string\">&quot;/node1/names&quot;</span>, <span class=\"hljs-string\">&quot;zhangsan&quot;</span>, CreateMode.PERSISTENT_SEQUENTIAL);\n        <span class=\"hljs-comment\">//3.临时节点</span>\n        zkClient.create(<span class=\"hljs-string\">&quot;/node1/lists&quot;</span>, <span class=\"hljs-string\">&quot;xiaoxiao&quot;</span>, CreateMode.EPHEMERAL);\n        <span class=\"hljs-comment\">//4.临时数据节点</span>\n        zkClient.create(<span class=\"hljs-string\">&quot;/node1/list11&quot;</span>, <span class=\"hljs-string\">&quot;xiaoming&quot;</span>, CreateMode.EPHEMERAL_SEQUENTIAL);\n\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDeleteNode</span><span class=\"hljs-params\">()</span> {\n<span class=\"hljs-comment\">//        boolean delete = zkClient.delete(&quot;/node1&quot;);</span>\n\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">recursive</span> <span class=\"hljs-operator\">=</span> zkClient.deleteRecursive(<span class=\"hljs-string\">&quot;/node1&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindNodes</span><span class=\"hljs-params\">()</span> {\n        List&lt;String&gt; children = zkClient.getChildren(<span class=\"hljs-string\">&quot;/&quot;</span>);\n        <span class=\"hljs-keyword\">for</span> (String child : children) {\n            System.out.println(child);\n        }\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindNodeData</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">readData</span> <span class=\"hljs-operator\">=</span> zkClient.readData(<span class=\"hljs-string\">&quot;/node1&quot;</span>);\n        System.out.println(readData);\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindNodeDataAndStat</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Stat</span> <span class=\"hljs-variable\">stat</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stat</span>();\n        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">readData</span> <span class=\"hljs-operator\">=</span> zkClient.readData(<span class=\"hljs-string\">&quot;/node1&quot;</span>, stat);\n        System.out.println(readData);\n        System.out.println(stat.getCversion());\n        System.out.println(stat.getCtime());\n        System.out.println(stat.getCzxid());\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteData</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();\n        user.setId(<span class=\"hljs-number\">1</span>);\n        user.setName(<span class=\"hljs-string\">&quot;李四&quot;</span>);\n        user.setAge(<span class=\"hljs-number\">12</span>);\n        user.setBir(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());\n        zkClient.writeData(<span class=\"hljs-string\">&quot;/node1&quot;</span>, user);\n        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">u</span> <span class=\"hljs-operator\">=</span> zkClient.readData(<span class=\"hljs-string\">&quot;/node1&quot;</span>);\n        System.out.println(u);\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWatchDataChange</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        zkClient.subscribeDataChanges(<span class=\"hljs-string\">&quot;/node1&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IZkDataListener</span>() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleDataChange</span><span class=\"hljs-params\">(String dataPath, Object data)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n                System.out.println(<span class=\"hljs-string\">&quot;当前节点路径：&quot;</span> + dataPath);\n                System.out.println(<span class=\"hljs-string\">&quot;当前节点变化后数据：&quot;</span> + data);\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleDataDeleted</span><span class=\"hljs-params\">(String dataPath)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n                System.out.println(<span class=\"hljs-string\">&quot;当前节点路径：&quot;</span> + dataPath);\n            }\n        });\n        System.in.read();<span class=\"hljs-comment\">//阻塞当前的监听</span>\n    }\n\n    <span class=\"hljs-comment\">//监听节点目录的变化</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testOnNodesChange</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        zkClient.subscribeChildChanges(<span class=\"hljs-string\">&quot;/node1&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IZkChildListener</span>() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleChildChange</span><span class=\"hljs-params\">(String parentPath, List&lt;String&gt; currentChilds)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n                System.out.println(<span class=\"hljs-string\">&quot;父节点路径：&quot;</span> + parentPath);\n                System.out.println(<span class=\"hljs-string\">&quot;发生变更后子节点孩子名称：&quot;</span>);\n                <span class=\"hljs-keyword\">for</span> (String currentChild : currentChilds) {\n                    System.out.println(currentChild);\n                }\n            }\n        });\n        System.in.read();\n    }\n\n    <span class=\"hljs-meta\">@AfterAll</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">after</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InterruptedException {\n<span class=\"hljs-comment\">//        Thread.sleep(5000);</span>\n        zkClient.close();\n    }\n}\n</code></div></pre>\n', '# Zookeeper\n\n## 官网下载\n\nhttps://zookeeper.apache.org/releases.html\n\n## 1.多节点类型创建\n\n### ①创建持久节点\n\n```shell\ncreate /节点\ncreate /test7\n```\n\n### ②创建持久序号节点\n\n```\ncreate -s /节点\n```\n\n### ③创建子节点\n\n```\ncreate /节点1/节点2\n```\n\n### ④创建临时节点\n\n```\ncreate -e /节点\n```\n\n### ⑤创建临时序号节点\n\n```\ncreate -e -s /节点\n```\n\n## 2.查询节点\n\n- 普通查询\n\n```shell\n#查询根节点\nls /\n\n#查询某个节点\nls /节点1\n\n#查询该节点下的所有节点\nls -R /节点\n```\n\n- 查询节点详细信息\n\n```shell\n# 获取该结点的数据\nget /节点\n\n# 获取该结点的详细信息\nget -s /节点\n```\n\n## 3.删除节点\n\n```shell\ndelete /节点\n\n#删除不为空的节点\ndeleteall /节点\n\n#乐观锁删除\ndelete -v dataVersion /节点\n例：\ndelete -v 1 /test\n\n#查询版本号\nls -s /节点    ----> dataVersion\n```\n\n## 4.权限设置\n\n```shell\n#注册当前会话的账号和密码\naddauth digest username:password\n#例如：\naddauth digest xiaoming:123456\n\n#创建节点并设置权限\ncreate /节点 数据 auth:username:password:操作权限\n#例如：\ncreate /test-node abc auth:xiaoming:123456:cdwra\n```\n\n## watch节点监听机制\n\n```shell\ncreate /test xxx #创建节点\nget -w /test #⼀次性监听节点\nls -w /test #监听⽬录,创建和删除⼦节点会收到通知。⼦节点中新增节点不会收到通知\nls -R -w /test #对于⼦节点中⼦节点的变化，但内容的变化不会收到通知\n```\n\n## Java客户端操作zk\n\n```java\npackage com.lzh;\n\nimport com.lzh.entity.User;\nimport org.I0Itec.zkclient.IZkChildListener;\nimport org.I0Itec.zkclient.IZkDataListener;\nimport org.I0Itec.zkclient.ZkClient;\nimport org.I0Itec.zkclient.serialize.SerializableSerializer;\nimport org.apache.zookeeper.CreateMode;\nimport org.apache.zookeeper.data.Stat;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.List;\n\n@SpringBootTest\npublic class TestZKClient {\n\n    private static ZkClient zkClient;\n\n    @BeforeAll\n    public static void before() {\n        zkClient = new ZkClient(\"192.168.146.137:2181\", 60000 * 30, 60000, new SerializableSerializer());\n    }\n\n    @Test\n    public void testCreateNode() {\n        //1.持久节点\n        zkClient.create(\"/node1\", \"xiaochen\", CreateMode.PERSISTENT);\n        //2.持久顺序节点\n        zkClient.create(\"/node1/names\", \"zhangsan\", CreateMode.PERSISTENT_SEQUENTIAL);\n        //3.临时节点\n        zkClient.create(\"/node1/lists\", \"xiaoxiao\", CreateMode.EPHEMERAL);\n        //4.临时数据节点\n        zkClient.create(\"/node1/list11\", \"xiaoming\", CreateMode.EPHEMERAL_SEQUENTIAL);\n\n    }\n\n    @Test\n    public void testDeleteNode() {\n//        boolean delete = zkClient.delete(\"/node1\");\n\n        boolean recursive = zkClient.deleteRecursive(\"/node1\");\n    }\n\n    @Test\n    public void testFindNodes() {\n        List<String> children = zkClient.getChildren(\"/\");\n        for (String child : children) {\n            System.out.println(child);\n        }\n    }\n\n    @Test\n    public void testFindNodeData() {\n        Object readData = zkClient.readData(\"/node1\");\n        System.out.println(readData);\n    }\n\n    @Test\n    public void testFindNodeDataAndStat() {\n        Stat stat = new Stat();\n        Object readData = zkClient.readData(\"/node1\", stat);\n        System.out.println(readData);\n        System.out.println(stat.getCversion());\n        System.out.println(stat.getCtime());\n        System.out.println(stat.getCzxid());\n    }\n\n    @Test\n    public void testWriteData() {\n        User user = new User();\n        user.setId(1);\n        user.setName(\"李四\");\n        user.setAge(12);\n        user.setBir(new Date());\n        zkClient.writeData(\"/node1\", user);\n        User u = zkClient.readData(\"/node1\");\n        System.out.println(u);\n    }\n\n    @Test\n    public void testWatchDataChange() throws IOException {\n        zkClient.subscribeDataChanges(\"/node1\", new IZkDataListener() {\n            @Override\n            public void handleDataChange(String dataPath, Object data) throws Exception {\n                System.out.println(\"当前节点路径：\" + dataPath);\n                System.out.println(\"当前节点变化后数据：\" + data);\n            }\n\n            @Override\n            public void handleDataDeleted(String dataPath) throws Exception {\n                System.out.println(\"当前节点路径：\" + dataPath);\n            }\n        });\n        System.in.read();//阻塞当前的监听\n    }\n\n    //监听节点目录的变化\n    @Test\n    public void testOnNodesChange() throws IOException {\n        zkClient.subscribeChildChanges(\"/node1\", new IZkChildListener() {\n            @Override\n            public void handleChildChange(String parentPath, List<String> currentChilds) throws Exception {\n                System.out.println(\"父节点路径：\" + parentPath);\n                System.out.println(\"发生变更后子节点孩子名称：\");\n                for (String currentChild : currentChilds) {\n                    System.out.println(currentChild);\n                }\n            }\n        });\n        System.in.read();\n    }\n\n    @AfterAll\n    public static void after() throws InterruptedException {\n//        Thread.sleep(5000);\n        zkClient.close();\n    }\n}\n```\n\n', 'Zookeeper', 1, 'http://localhost:9000/lzh-blog/img_1691743461256.jpeg', '0', '0', 6, 1, 0, 2, '1', 1, '2023-05-28 13:43:20', NULL, '2023-08-11 16:58:39', 0);

-- ----------------------------
-- Table structure for lzh_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `lzh_article_tag`;
CREATE TABLE `lzh_article_tag`  (
  `article_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '文章id',
  `tag_id` bigint(20) NOT NULL DEFAULT 0 COMMENT '标签id',
  PRIMARY KEY (`article_id`, `tag_id`) USING BTREE,
  INDEX `idx_article_tag_id`(`article_id`, `tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1663903522481082371 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '文章标签关联表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_article_tag
-- ----------------------------
INSERT INTO `lzh_article_tag` VALUES (1, 2);
INSERT INTO `lzh_article_tag` VALUES (1, 3);
INSERT INTO `lzh_article_tag` VALUES (1, 4);
INSERT INTO `lzh_article_tag` VALUES (1589626579030384642, 4);
INSERT INTO `lzh_article_tag` VALUES (1627503573914947586, 10);
INSERT INTO `lzh_article_tag` VALUES (1627503573914947586, 11);
INSERT INTO `lzh_article_tag` VALUES (1627534326015000578, 11);
INSERT INTO `lzh_article_tag` VALUES (1627534326015000578, 14);
INSERT INTO `lzh_article_tag` VALUES (1627534326015000578, 16);
INSERT INTO `lzh_article_tag` VALUES (1627535444652646403, 6);
INSERT INTO `lzh_article_tag` VALUES (1627535444652646404, 7);
INSERT INTO `lzh_article_tag` VALUES (1627535444652646405, 6);
INSERT INTO `lzh_article_tag` VALUES (1627535444652646406, 7);
INSERT INTO `lzh_article_tag` VALUES (1638799566278070273, 4);
INSERT INTO `lzh_article_tag` VALUES (1638799566278070273, 9);
INSERT INTO `lzh_article_tag` VALUES (1660478455243993091, 4);
INSERT INTO `lzh_article_tag` VALUES (1662430187142406145, 4);
INSERT INTO `lzh_article_tag` VALUES (1662432903277207554, 4);
INSERT INTO `lzh_article_tag` VALUES (1662432903277207554, 9);
INSERT INTO `lzh_article_tag` VALUES (1662432903277207554, 12);
INSERT INTO `lzh_article_tag` VALUES (1662435411705982977, 2);
INSERT INTO `lzh_article_tag` VALUES (1662696030996729857, 4);
INSERT INTO `lzh_article_tag` VALUES (1663466784667443201, 10);
INSERT INTO `lzh_article_tag` VALUES (1663467371689648129, 4);
INSERT INTO `lzh_article_tag` VALUES (1663467371689648129, 10);
INSERT INTO `lzh_article_tag` VALUES (1663468503749074946, 4);
INSERT INTO `lzh_article_tag` VALUES (1663468889046228993, 4);
INSERT INTO `lzh_article_tag` VALUES (1663468889046228993, 9);
INSERT INTO `lzh_article_tag` VALUES (1663468889046228993, 10);
INSERT INTO `lzh_article_tag` VALUES (1663898715741589506, 9);
INSERT INTO `lzh_article_tag` VALUES (1663903522481082369, 4);
INSERT INTO `lzh_article_tag` VALUES (1663903522481082370, 4);

-- ----------------------------
-- Table structure for lzh_carousel_img
-- ----------------------------
DROP TABLE IF EXISTS `lzh_carousel_img`;
CREATE TABLE `lzh_carousel_img`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_by` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建者',
  `update_by` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '更新者',
  `remarks` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '逻辑删除标记（0：未删除；1：已删除）',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `url` varchar(10000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '链接地址',
  `img` varchar(300) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '图片地址',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序',
  `status` int(255) NULL DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '文档管理-轮播图' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_carousel_img
-- ----------------------------
INSERT INTO `lzh_carousel_img` VALUES (1, NULL, NULL, 'WELCOME TO MY PERSEVERE BLOG', 0, '', 'http://118.89.125.143:9000/lzh-blog/img_1697243658033.jpg', 'http://118.89.125.143:9000/lzh-blog/img_1697243658033.jpg', 5, 0);
INSERT INTO `lzh_carousel_img` VALUES (2, NULL, NULL, '边月随弓影,胡霜拂剑花', 0, '20大', 'http://118.89.125.143:9000/lzh-blog/img_1697351796371.jpg', 'http://118.89.125.143:9000/lzh-blog/img_1697351796371.jpg', 2, 0);
INSERT INTO `lzh_carousel_img` VALUES (3, NULL, NULL, 'NBUFE', 0, NULL, 'http://118.89.125.143:9000/lzh-blog/img_1697351861267.jpg', 'http://118.89.125.143:9000/lzh-blog/img_1697351861267.jpg', 3, 0);
INSERT INTO `lzh_carousel_img` VALUES (4, NULL, NULL, '抬望眼,仰天长啸,壮怀激烈', 0, NULL, 'http://118.89.125.143:9000/lzh-blog/img_1697351769754.jpg', 'http://118.89.125.143:9000/lzh-blog/img_1697351769754.jpg', 4, 0);
INSERT INTO `lzh_carousel_img` VALUES (5, NULL, NULL, '奋进新征程，建功新时代', 0, NULL, 'http://118.89.125.143:9000/lzh-blog/img_1697351718230.jpg', 'http://118.89.125.143:9000/lzh-blog/img_1697351718230.jpg', 2, 0);
INSERT INTO `lzh_carousel_img` VALUES (6, NULL, NULL, 'I LOVE NBUFE', 0, NULL, 'http://1.117.218.230:9000/test/nb_d_80.jpg', 'http://rkafz00mn.hd-bkt.clouddn.com/carousel/tree.png', 3, 0);

-- ----------------------------
-- Table structure for lzh_category
-- ----------------------------
DROP TABLE IF EXISTS `lzh_category`;
CREATE TABLE `lzh_category`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分类名',
  `pid` bigint(20) NULL DEFAULT -1 COMMENT '父分类id，如果没有父分类为-1',
  `description` varchar(512) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `status` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '状态0:正常,1禁用',
  `sort` bigint(20) NULL DEFAULT 0 COMMENT '排序',
  `click_num` bigint(20) NULL DEFAULT 0 COMMENT '点击数',
  `create_by` bigint(20) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP,
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1629051205330178052 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '分类表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_category
-- ----------------------------
INSERT INTO `lzh_category` VALUES (1, 'Java', -1, '高级编程语言', '0', 12, 1, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (2, 'PHP', -1, 'php语言', '0', 2, 2, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (15, 'SpringBoot', -1, 'Spring框架', '0', 3, 4, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (16, 'C++', -1, 'C Plus Plus', '0', 21, 2, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (17, 'C#', -1, NULL, '0', 63, 3, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (18, 'Python', -1, '解释型语言，语法简单', '0', 6, 34, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (19, '机器学习', -1, NULL, '0', 5, 65, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (20, 'Spring', -1, '简化Java开发', '0', 551, 23, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (21, '大数据', -1, NULL, '0', 7, 41, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (22, '人工智能', -1, NULL, '0', 32, 68, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (23, '队列', -1, NULL, '0', 12, 12, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (24, '中间件', -1, NULL, '0', 9, 76, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (25, '设计模式', -1, NULL, '0', 43, 0, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (26, 'JVM', -1, NULL, '0', 7, 65, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (27, '计算机组成原理', -1, NULL, '0', 9, 6, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (28, '计算机网络', -1, NULL, '0', 6, 75, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (29, '算法', -1, NULL, '0', 94, 45, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (30, '数据结构', -1, NULL, '0', 786, 3, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (31, '二叉树', -1, '一种树类型的数据结构', '0', 23, 334, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (32, 'VUE', -1, NULL, '0', 54, 55, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (33, 'Bootstrap', -1, NULL, '0', 64, 545, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (34, 'JavaScript', -1, NULL, '0', 53, 5, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (35, 'HTML', -1, NULL, '0', 23, 6, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (36, 'CSS', -1, NULL, '0', 6, 54, NULL, '2023-02-08 15:05:05', NULL, '2023-02-08 15:05:05', 0);
INSERT INTO `lzh_category` VALUES (1629050998127366145, '日常', -1, '记录日常生活，分享美好事物', '0', 123, 0, NULL, '2023-02-24 17:29:58', NULL, '2023-02-24 17:29:58', 0);
INSERT INTO `lzh_category` VALUES (1629051205330178049, '爱好', -1, '分享每个人的兴趣爱好', '0', 23, 0, NULL, '2023-02-24 17:30:48', NULL, '2023-02-24 17:30:48', 0);
INSERT INTO `lzh_category` VALUES (1629051205330178050, '云计算', -1, NULL, '0', 0, 0, NULL, '2023-05-31 21:41:07', NULL, '2023-05-31 21:41:07', 0);
INSERT INTO `lzh_category` VALUES (1629051205330178051, '云原生', -1, NULL, '0', 0, 0, NULL, '2023-05-31 21:41:12', NULL, '2023-05-31 21:41:12', 0);

-- ----------------------------
-- Table structure for lzh_chat_communication
-- ----------------------------
DROP TABLE IF EXISTS `lzh_chat_communication`;
CREATE TABLE `lzh_chat_communication`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `from_id` bigint(20) NULL DEFAULT NULL COMMENT '发送人id',
  `from_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送人name',
  `to_id` int(11) NULL DEFAULT NULL COMMENT '接收人id，不适用与群消息',
  `to_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收人name不适用于群消息',
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息内容',
  `from_avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '时间',
  `group_id` int(11) NULL DEFAULT NULL COMMENT '群id',
  `group_name` int(11) NULL DEFAULT NULL COMMENT '群名称',
  `is_read` tinyint(4) NULL DEFAULT 0 COMMENT '是否已读,不适用于群消息 0 已读 1 未读',
  `type` tinyint(4) NULL DEFAULT 1 COMMENT '消息类型：1是普通文本，2是图片，3是语音',
  `is_user_group` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '消息类：1是用户聊天，2是群组聊天',
  `del_flag` tinyint(4) NULL DEFAULT 0 COMMENT '逻辑删除 0 未删除 1 已删除',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1621054327342850050 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '聊天记录' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_chat_communication
-- ----------------------------
INSERT INTO `lzh_chat_communication` VALUES (1590348436469723138, NULL, 'lisi', NULL, 'lzh', '   \n          \n\n\n\n\n\n\n\n \n \n \n \n \n\nd\n', 'https://img1.baidu.com/it/u=1659441821,1293635445&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', '2023-02-02 15:53:26', NULL, NULL, 0, 1, NULL, 0);
INSERT INTO `lzh_chat_communication` VALUES (1590348437182754817, NULL, 'lisi', NULL, 'lzh', 'd\n', 'https://img1.baidu.com/it/u=1659441821,1293635445&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', '2023-02-02 15:53:26', NULL, NULL, 0, 1, NULL, 0);
INSERT INTO `lzh_chat_communication` VALUES (1590348437837066241, NULL, 'lisi', NULL, 'lzh', 'f\nd', 'https://img1.baidu.com/it/u=1659441821,1293635445&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', '2023-02-02 15:53:26', NULL, NULL, 0, 1, NULL, 0);
INSERT INTO `lzh_chat_communication` VALUES (1621054225773584386, NULL, 'lzh', NULL, 'lisi', '你好啊[微笑]', 'http://1.117.218.230:9000/test/nbufe.jpg', '2023-02-02 15:53:50', NULL, NULL, 0, 1, NULL, 0);
INSERT INTO `lzh_chat_communication` VALUES (1621054253112057857, NULL, 'lisi', NULL, 'lzh', '哈哈哈\n', 'https://img1.baidu.com/it/u=1659441821,1293635445&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', '2023-02-02 15:54:11', NULL, NULL, 0, 1, NULL, 0);
INSERT INTO `lzh_chat_communication` VALUES (1621054290432974850, NULL, 'lisi', NULL, 'lzh', '嗯嗯嗯\n', 'https://img1.baidu.com/it/u=1659441821,1293635445&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', '2023-02-02 15:54:11', NULL, NULL, 0, 1, NULL, 0);
INSERT INTO `lzh_chat_communication` VALUES (1621054311836508161, NULL, 'lisi', NULL, 'lzh', '啊啊啊啊\n', 'https://img1.baidu.com/it/u=1659441821,1293635445&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', '2023-02-02 15:54:11', NULL, NULL, 0, 1, NULL, 0);
INSERT INTO `lzh_chat_communication` VALUES (1621054327342850049, NULL, 'lisi', NULL, 'lzh', '6\n', 'https://img1.baidu.com/it/u=1659441821,1293635445&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', '2023-02-02 15:54:11', NULL, NULL, 0, 1, NULL, 0);

-- ----------------------------
-- Table structure for lzh_collect
-- ----------------------------
DROP TABLE IF EXISTS `lzh_collect`;
CREATE TABLE `lzh_collect`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `article_id` bigint(20) NULL DEFAULT NULL COMMENT '文章id',
  `collect_status` int(11) NULL DEFAULT NULL COMMENT '收藏状态 0 未收藏 1 已收藏',
  `collect_time` datetime NULL DEFAULT NULL COMMENT '收藏时间',
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '是否逻辑删除',
  `create_time` datetime NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1663468621088923650 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_collect
-- ----------------------------
INSERT INTO `lzh_collect` VALUES (1, 1, 2, 0, '2022-10-19 18:54:27', 0, '2022-10-19 18:54:30', '2022-10-19 18:54:33');
INSERT INTO `lzh_collect` VALUES (1582699606096093185, 1, 3, 1, '2022-10-19 19:46:19', 0, '2022-10-19 19:46:31', '2022-10-19 19:46:34');
INSERT INTO `lzh_collect` VALUES (1582711386608480258, 2, 3, 1, NULL, 0, '2022-10-19 20:32:55', '2022-10-19 20:32:55');
INSERT INTO `lzh_collect` VALUES (1582711877283328002, 1, 1576527547464937474, 1, NULL, 0, '2022-10-19 20:34:52', '2022-10-19 20:34:52');
INSERT INTO `lzh_collect` VALUES (1582712249716547586, 1, 5, 0, NULL, 0, '2022-10-19 20:36:20', '2022-10-19 20:36:20');
INSERT INTO `lzh_collect` VALUES (1582712815846924290, 1, 10, 1, NULL, 0, '2022-10-19 20:38:35', '2022-10-19 20:38:35');
INSERT INTO `lzh_collect` VALUES (1582713970173911042, 1, 1579692483556806657, 1, NULL, 0, '2022-10-19 20:43:11', '2022-10-19 20:43:11');
INSERT INTO `lzh_collect` VALUES (1582714043662311426, 1, 1580876557625585665, 0, NULL, 0, '2022-10-19 20:43:28', '2022-10-19 20:43:28');
INSERT INTO `lzh_collect` VALUES (1582970659041067009, 1, 1579730661248593922, 1, NULL, 0, '2022-10-20 13:43:10', '2022-10-20 13:43:10');
INSERT INTO `lzh_collect` VALUES (1582970742327361538, 1, 1580782348893626370, 1, NULL, 0, '2022-10-20 13:43:30', '2022-10-20 13:43:30');
INSERT INTO `lzh_collect` VALUES (1583752766025871361, 1, 1581248764574834689, 0, NULL, 0, '2022-10-22 17:30:59', '2022-10-22 17:30:59');
INSERT INTO `lzh_collect` VALUES (1584137651676651522, 2, 2, 0, NULL, 0, '2022-10-23 19:00:23', '2022-10-23 19:00:23');
INSERT INTO `lzh_collect` VALUES (1584138887205363714, 2, 1576527547464937474, 0, NULL, 0, '2022-10-23 19:05:17', '2022-10-23 19:05:17');
INSERT INTO `lzh_collect` VALUES (1584138924589195265, 2, 1581248764574834689, 1, NULL, 0, '2022-10-23 19:05:26', '2022-10-23 19:05:26');
INSERT INTO `lzh_collect` VALUES (1584138965873729538, 2, 1579035117211553793, 1, NULL, 0, '2022-10-23 19:05:36', '2022-10-23 19:05:36');
INSERT INTO `lzh_collect` VALUES (1584138999017119745, 2, 1579692483556806657, 1, NULL, 0, '2022-10-23 19:05:44', '2022-10-23 19:05:44');
INSERT INTO `lzh_collect` VALUES (1584151040239054849, 1, 8, 1, NULL, 0, '2022-10-23 19:53:35', '2022-10-23 19:53:35');
INSERT INTO `lzh_collect` VALUES (1584776958020038657, 1, 1581491547428610050, 0, NULL, 0, '2022-10-25 13:20:45', '2022-10-25 13:20:45');
INSERT INTO `lzh_collect` VALUES (1584795471170486273, 1, 1584795396985831425, 0, NULL, 0, '2022-10-25 14:34:19', '2022-10-25 14:34:19');
INSERT INTO `lzh_collect` VALUES (1589422332175192065, 1, 1580001549915234305, 0, NULL, 0, '2022-11-07 08:59:49', '2022-11-07 08:59:49');
INSERT INTO `lzh_collect` VALUES (1589422803568824322, 1, 1589422745435770881, 0, NULL, 0, '2022-11-07 09:01:41', '2022-11-07 09:01:41');
INSERT INTO `lzh_collect` VALUES (1589570238702194689, 1, 1589570183937167361, 1, NULL, 0, '2022-11-07 18:47:32', '2022-11-07 18:47:32');
INSERT INTO `lzh_collect` VALUES (1589571261768437761, 1, 1589570781973614594, 0, NULL, 0, '2022-11-07 18:51:36', '2022-11-07 18:51:36');
INSERT INTO `lzh_collect` VALUES (1659891757690781697, 1, 1627899980027076609, 0, NULL, 0, '2023-05-20 20:00:09', '2023-05-20 20:00:09');
INSERT INTO `lzh_collect` VALUES (1660438340870205441, 1, 1660438178655498242, 0, NULL, 0, '2023-05-22 08:12:05', '2023-05-22 08:12:05');
INSERT INTO `lzh_collect` VALUES (1662431461569064962, 1, 1662430187142406145, 1, NULL, 0, '2023-05-27 20:12:02', '2023-05-27 20:12:02');
INSERT INTO `lzh_collect` VALUES (1662702215246286849, 1, 1662435411705982977, 1, NULL, 0, '2023-05-28 14:07:54', '2023-05-28 14:07:54');
INSERT INTO `lzh_collect` VALUES (1662758305203945473, 1, 1662432903277207554, 1, NULL, 0, '2023-05-28 17:50:47', '2023-05-28 17:50:47');
INSERT INTO `lzh_collect` VALUES (1662805136466235394, 1, 0, 1, NULL, 0, '2023-05-28 20:56:53', '2023-05-28 20:56:53');
INSERT INTO `lzh_collect` VALUES (1663468621088923649, 1, 1663468503749074946, 1, NULL, 0, '2023-05-30 16:53:20', '2023-05-30 16:53:20');

-- ----------------------------
-- Table structure for lzh_comment
-- ----------------------------
DROP TABLE IF EXISTS `lzh_comment`;
CREATE TABLE `lzh_comment`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `type` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '评论类型（0代表文章评论，1代表友链评论，2代表问答评论）',
  `article_id` bigint(20) NULL DEFAULT NULL COMMENT '文章id',
  `root_id` bigint(20) NULL DEFAULT -1 COMMENT '根评论id',
  `content` varchar(512) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论内容',
  `to_comment_user_id` bigint(20) NULL DEFAULT -1 COMMENT '所回复的目标评论的userid',
  `to_comment_id` bigint(20) NULL DEFAULT -1 COMMENT '回复目标评论id',
  `create_by` bigint(20) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_articleId_type`(`type`, `article_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1662790025311563779 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '评论表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_comment
-- ----------------------------
INSERT INTO `lzh_comment` VALUES (1579712259972886529, '0', 2, -1, 'hello world', -1, 1579691106277396482, NULL, '2022-10-11 13:55:27', NULL, '2022-10-11 13:55:27', 0);
INSERT INTO `lzh_comment` VALUES (1579712319133544450, '0', 2, -1, '你好，世界', -1, 1579691106277396482, NULL, '2022-10-11 13:55:41', NULL, '2022-10-11 13:55:41', 0);
INSERT INTO `lzh_comment` VALUES (1579722752779350017, '0', 9, -1, '你好', -1, 1, NULL, '2022-10-11 14:37:09', NULL, '2022-10-11 14:37:09', 0);
INSERT INTO `lzh_comment` VALUES (1579730373557088258, '0', 8, -1, 'hello', -1, 1, NULL, '2022-10-11 15:07:26', NULL, '2022-10-11 15:07:26', 0);
INSERT INTO `lzh_comment` VALUES (1579784957553938433, '0', 2, -1, '未来好', -1, 1, NULL, '2022-10-11 18:44:20', NULL, '2022-10-11 18:44:20', 0);
INSERT INTO `lzh_comment` VALUES (1579785001883537409, '0', 2, 1579712319133544450, '你好啊', 1579691106277396482, 1, NULL, '2022-10-11 18:44:30', NULL, '2022-10-11 18:44:30', 0);
INSERT INTO `lzh_comment` VALUES (1580377260232531970, '0', 9, 1579722752779350017, '123', 1, 1, NULL, '2022-10-13 09:57:55', NULL, '2022-10-13 09:57:55', 0);
INSERT INTO `lzh_comment` VALUES (1580782707930243074, '0', 2, 1579784957553938433, '123123', 1, 1, NULL, '2022-10-14 12:49:02', NULL, '2022-10-14 12:49:02', 0);
INSERT INTO `lzh_comment` VALUES (1580790042799054850, '0', 1576527547464937474, -1, '12345', -1, 1, NULL, '2022-10-14 13:18:11', NULL, '2022-10-14 13:18:11', 0);
INSERT INTO `lzh_comment` VALUES (1580790544936935426, '0', 1576527547464937474, -1, 'hello world', -1, 1, NULL, '2022-10-14 13:20:10', NULL, '2022-10-14 13:20:10', 0);
INSERT INTO `lzh_comment` VALUES (1580790719172517889, '0', 1580782348893626370, -1, 'test评论', -1, 1, NULL, '2022-10-14 13:20:52', NULL, '2022-10-14 13:20:52', 0);
INSERT INTO `lzh_comment` VALUES (1580792274948923393, '0', 1576527547464937474, 1580790544936935426, '无聊的环面，全部都看见', 1, 1, NULL, '2022-10-14 13:27:03', NULL, '2022-10-14 13:27:03', 0);
INSERT INTO `lzh_comment` VALUES (1580792391521214465, '0', 1580782348893626370, -1, 'welcome to my persevere blog', -1, 1, NULL, '2022-10-14 13:27:31', NULL, '2022-10-14 13:27:31', 0);
INSERT INTO `lzh_comment` VALUES (1580874076078206978, '0', 1576527547464937474, 1580790042799054850, 'qwqwqw', 1, 1578603364453953538, NULL, '2022-10-14 18:52:06', NULL, '2022-10-14 18:52:06', 0);
INSERT INTO `lzh_comment` VALUES (1580875253905879042, '0', 1580782348893626370, 1580792391521214465, 'aaaaaaaaaaaa', 1, 1578603364453953538, NULL, '2022-10-14 18:56:46', NULL, '2022-10-14 18:56:46', 0);
INSERT INTO `lzh_comment` VALUES (1580876655025713153, '0', 1580876557625585665, -1, '评论一个', -1, 1578603364453953538, NULL, '2022-10-14 19:02:20', NULL, '2022-10-14 19:02:20', 0);
INSERT INTO `lzh_comment` VALUES (1581487571064840193, '0', 2, 1579784957553938433, '[钱][钱]', 1, 1, NULL, '2022-10-16 11:29:54', NULL, '2022-10-16 11:29:54', 0);
INSERT INTO `lzh_comment` VALUES (1581490034455076866, '0', 2, 1579784957553938433, '[哈哈][哈哈][哈哈]', 1, 1, NULL, '2022-10-16 11:39:42', NULL, '2022-10-16 11:39:42', 0);
INSERT INTO `lzh_comment` VALUES (1581490198842433538, '0', 2, 1579712259972886529, '你好，世界', 1579691106277396482, 1, NULL, '2022-10-16 11:40:21', NULL, '2022-10-16 11:40:21', 0);
INSERT INTO `lzh_comment` VALUES (1581524136138780674, '0', 1581523482204844033, -1, 'qqq', -1, 1, NULL, '2022-10-16 13:55:12', NULL, '2022-10-16 13:55:12', 0);
INSERT INTO `lzh_comment` VALUES (1581623658089218049, '0', 3, -1, '[微笑]', -1, 1, NULL, '2022-10-16 20:30:40', NULL, '2022-10-16 20:30:40', 0);
INSERT INTO `lzh_comment` VALUES (1581623915900502018, '0', 3, -1, '[微笑]', -1, 1, NULL, '2022-10-16 20:31:41', NULL, '2022-10-16 20:31:41', 0);
INSERT INTO `lzh_comment` VALUES (1581648460128649217, '0', 2, -1, '[伤心]', -1, 1, NULL, '2022-10-16 22:09:13', NULL, '2022-10-16 22:09:13', 0);
INSERT INTO `lzh_comment` VALUES (1581833992527835138, '0', 2, -1, '[不][不][不]', -1, 1, NULL, '2022-10-17 10:26:28', NULL, '2022-10-17 10:26:28', 0);
INSERT INTO `lzh_comment` VALUES (1581834051596218370, '0', 2, 1581648460128649217, '[馋嘴][馋嘴][哈哈][哈哈][哈哈]', 1, 1, NULL, '2022-10-17 10:26:42', NULL, '2022-10-17 10:26:42', 0);
INSERT INTO `lzh_comment` VALUES (1581835466930548737, '0', 2, 1579712319133544450, '[可怜][可怜][可怜][微笑][微笑][微笑]', 1579691106277396482, 1, NULL, '2022-10-17 10:32:19', NULL, '2022-10-17 10:32:19', 0);
INSERT INTO `lzh_comment` VALUES (1581860209633161217, '0', 2, -1, '[可怜][可怜][可怜][可怜]', -1, 1, NULL, '2022-10-17 12:10:38', NULL, '2022-10-17 12:10:38', 0);
INSERT INTO `lzh_comment` VALUES (1581860265631313922, '0', 2, 1581860209633161217, '[微笑][微笑][微笑][微笑][微笑][微笑]', 1, 1, NULL, '2022-10-17 12:10:52', NULL, '2022-10-17 12:10:52', 0);
INSERT INTO `lzh_comment` VALUES (1582259784743383042, '0', 2, 1579712259972886529, '[嘻嘻][嘻嘻][嘻嘻][衰][衰]hello!!!', 1, 2, NULL, '2022-10-18 14:38:24', NULL, '2022-10-18 14:38:24', 0);
INSERT INTO `lzh_comment` VALUES (1582259867929014273, '0', 2, 1579712259972886529, 'I\'m fine.Thank you!', 1579691106277396482, 2, NULL, '2022-10-18 14:38:44', NULL, '2022-10-18 14:38:44', 0);
INSERT INTO `lzh_comment` VALUES (1582259949101379585, '0', 2, 1579712319133544450, '[钱][钱][钱][酷][酷][酷]', 1, 2, NULL, '2022-10-18 14:39:03', NULL, '2022-10-18 14:39:03', 0);
INSERT INTO `lzh_comment` VALUES (1582264262175485953, '0', 2, -1, '测试表情包评论[互粉][书呆子][困][睡][钱][失望][左哼哼][嘘][酷][衰][色][哼][吐][哈欠][鼓掌][晕][抱抱][悲伤][抓狂]', -1, 1, NULL, '2022-10-18 14:56:12', NULL, '2022-10-18 14:56:12', 0);
INSERT INTO `lzh_comment` VALUES (1582566360909807618, '0', 1579031502224822274, -1, '[嘻嘻][嘻嘻][嘻嘻][嘻嘻][微笑][微笑][微笑][微笑][微笑]', -1, 1, NULL, '2022-10-19 10:56:38', NULL, '2022-10-19 10:56:38', 0);
INSERT INTO `lzh_comment` VALUES (1582601328478351362, '2', -1, -1, 'test chat', -1, 1, NULL, '2022-10-19 13:15:35', NULL, '2022-10-19 13:15:35', 0);
INSERT INTO `lzh_comment` VALUES (1582601765931675650, '2', -1, -1, 'aaa', -1, 1, NULL, '2022-10-19 13:17:19', NULL, '2022-10-19 13:17:19', 0);
INSERT INTO `lzh_comment` VALUES (1582602573016428545, '2', -1, -1, 'qqqqq', -1, 1, NULL, '2022-10-19 13:20:31', NULL, '2022-10-19 13:20:31', 0);
INSERT INTO `lzh_comment` VALUES (1582603341467398145, '2', -1, -1, 'aaaaaa', -1, 1, NULL, '2022-10-19 13:23:35', NULL, '2022-10-19 13:23:35', 0);
INSERT INTO `lzh_comment` VALUES (1582608986711175169, '2', -1, -1, '[微笑][微笑][微笑]', -1, 1, NULL, '2022-10-19 13:46:01', NULL, '2022-10-19 13:46:01', 0);
INSERT INTO `lzh_comment` VALUES (1582614074775265282, '2', -1, 1582601328478351362, '[哈哈][哈哈]', 1, 1, NULL, '2022-10-19 14:06:14', NULL, '2022-10-19 14:06:14', 0);
INSERT INTO `lzh_comment` VALUES (1582614197332828162, '2', -1, 1582601328478351362, '[微笑][微笑][微笑][微笑][嘻嘻][嘻嘻]', 1, 2, NULL, '2022-10-19 14:06:43', NULL, '2022-10-19 14:06:43', 0);
INSERT INTO `lzh_comment` VALUES (1582614233189933057, '2', -1, 1582601328478351362, '[可怜][可怜][可怜][黑线][衰]', 1, 2, NULL, '2022-10-19 14:06:51', NULL, '2022-10-19 14:06:51', 0);
INSERT INTO `lzh_comment` VALUES (1582615217869905921, '2', -1, -1, '[困][困][困][困][馋嘴]', -1, 2, NULL, '2022-10-19 14:10:46', NULL, '2022-10-19 14:10:46', 0);
INSERT INTO `lzh_comment` VALUES (1582645253939286018, '2', -1, -1, '[微笑][微笑][微笑][微笑]', -1, 1, NULL, '2022-10-19 16:10:07', NULL, '2022-10-19 16:10:07', 0);
INSERT INTO `lzh_comment` VALUES (1582645284092137474, '2', -1, 1582645253939286018, '[可怜][可怜][可怜][可怜]', 1, 1, NULL, '2022-10-19 16:10:15', NULL, '2022-10-19 16:10:15', 0);
INSERT INTO `lzh_comment` VALUES (1582645309006303234, '2', -1, 1582615217869905921, '[哈哈][哈哈][哈哈]', 2, 1, NULL, '2022-10-19 16:10:20', NULL, '2022-10-19 16:10:20', 0);
INSERT INTO `lzh_comment` VALUES (1582665569520451585, '2', -1, 1582645253939286018, '[微笑][微笑][微笑][微笑]', 1, 1, NULL, '2022-10-19 17:30:51', NULL, '2022-10-19 17:30:51', 0);
INSERT INTO `lzh_comment` VALUES (1583641905399537665, '0', 2, -1, '[泪][泪][泪]测试时间排序评论', -1, 1, NULL, '2022-10-22 10:10:28', NULL, '2022-10-22 10:10:28', 0);
INSERT INTO `lzh_comment` VALUES (1583643380838244353, '2', -1, -1, 'welcome to persevere blog[哈哈][哈哈][哈哈]', -1, 1, NULL, '2022-10-22 10:16:19', NULL, '2022-10-22 10:16:19', 0);
INSERT INTO `lzh_comment` VALUES (1583782576512999425, '2', -1, -1, 'never forget why you started!!![太开心][太开心][太开心]', -1, 1, NULL, '2022-10-22 19:29:26', NULL, '2022-10-22 19:29:26', 0);
INSERT INTO `lzh_comment` VALUES (1584064756111880194, '0', 2, -1, '111', -1, 1, NULL, '2022-10-23 14:10:43', NULL, '2022-10-23 14:10:43', 0);
INSERT INTO `lzh_comment` VALUES (1584146154445320194, '2', -1, -1, '完成粉丝、关注[哈哈][哈哈][哈哈][哈哈]', -1, 20, NULL, '2022-10-23 19:34:10', NULL, '2022-10-23 19:34:10', 0);
INSERT INTO `lzh_comment` VALUES (1584333375416807425, '2', -1, -1, '[哈欠][哈欠][哈欠][哈欠]', -1, 1, NULL, '2022-10-24 07:58:07', NULL, '2022-10-24 07:58:07', 0);
INSERT INTO `lzh_comment` VALUES (1584333470937886721, '2', -1, -1, '[心][心][心][心]', -1, 1, NULL, '2022-10-24 07:58:30', NULL, '2022-10-24 07:58:30', 0);
INSERT INTO `lzh_comment` VALUES (1584333963365953538, '2', -1, 1584146154445320194, '[微笑][微笑][微笑]', 20, 1, NULL, '2022-10-24 08:00:27', NULL, '2022-10-24 08:00:27', 0);
INSERT INTO `lzh_comment` VALUES (1584333994718375938, '2', -1, -1, '123', -1, 1, NULL, '2022-10-24 08:00:35', NULL, '2022-10-24 08:00:35', 0);
INSERT INTO `lzh_comment` VALUES (1584334473078747138, '2', -1, -1, 'hello world', -1, 1, NULL, '2022-10-24 08:02:29', NULL, '2022-10-24 08:02:29', 0);
INSERT INTO `lzh_comment` VALUES (1584335785233207297, '2', -1, -1, '[可爱][可爱][可爱][可爱]', -1, 1, NULL, '2022-10-24 08:07:41', NULL, '2022-10-24 08:07:41', 0);
INSERT INTO `lzh_comment` VALUES (1584787198513917953, '0', 1579730661248593922, -1, '[微笑][微笑][微笑]', -1, 1, NULL, '2022-10-25 14:01:27', NULL, '2022-10-25 14:01:27', 0);
INSERT INTO `lzh_comment` VALUES (1584809807700017153, '2', -1, -1, '[可怜][可怜]', -1, 1, NULL, '2022-10-25 15:31:17', NULL, '2022-10-25 15:31:17', 0);
INSERT INTO `lzh_comment` VALUES (1589564043325116418, '0', 2, -1, '[衰][衰][衰][衰]', -1, 1, NULL, '2022-11-07 18:22:55', NULL, '2022-11-07 18:22:55', 0);
INSERT INTO `lzh_comment` VALUES (1589570536569081857, '0', 1589570183937167361, -1, '[嘻嘻][嘻嘻][嘻嘻]', -1, 1, NULL, '2022-11-07 18:48:43', NULL, '2022-11-07 18:48:43', 0);
INSERT INTO `lzh_comment` VALUES (1621764964459184129, '0', 1580782348893626370, -1, 'hello\n你好', -1, 1, NULL, '2023-02-04 14:57:53', NULL, '2023-02-04 14:57:53', 0);
INSERT INTO `lzh_comment` VALUES (1660440499368099842, '0', 1660438178655498242, -1, 'hhh', -1, 1, NULL, '2023-05-22 08:20:39', NULL, '2023-05-22 08:20:39', 0);
INSERT INTO `lzh_comment` VALUES (1660441898176872449, '0', 1660438178655498242, 1660440499368099842, '111', 1, 1, NULL, '2023-05-22 08:26:13', NULL, '2023-05-22 08:26:13', 0);
INSERT INTO `lzh_comment` VALUES (1660442155254153218, '0', 1660438178655498242, 1660440499368099842, '222', 1, 1, NULL, '2023-05-22 08:27:14', NULL, '2023-05-22 08:27:14', 0);
INSERT INTO `lzh_comment` VALUES (1662431415133925377, '0', 1662430187142406145, -1, '[哈哈][哈哈][哈哈]', -1, 1, NULL, '2023-05-27 20:11:51', NULL, '2023-05-27 20:11:51', 0);
INSERT INTO `lzh_comment` VALUES (1662431445202890753, '0', 1662430187142406145, 1662431415133925377, '[微笑]', 1, 1, NULL, '2023-05-27 20:11:58', NULL, '2023-05-27 20:11:58', 0);
INSERT INTO `lzh_comment` VALUES (1662790025311563778, '0', 1662435411705982977, -1, '[可爱][可爱][可爱]', -1, 1, NULL, '2023-05-28 19:56:50', NULL, '2023-05-28 19:56:50', 0);

-- ----------------------------
-- Table structure for lzh_friend_link
-- ----------------------------
DROP TABLE IF EXISTS `lzh_friend_link`;
CREATE TABLE `lzh_friend_link`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(60) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '友链名称',
  `url` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'url链接',
  `target` tinyint(4) NOT NULL DEFAULT 0 COMMENT '跳转方式，0_blank，1_self，2_parent，3_top，4framename',
  `status` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '状态 0 下架，1 上架，2 申请',
  `group_id` int(11) NOT NULL DEFAULT 0 COMMENT '分组ID',
  `listorder` int(11) NOT NULL DEFAULT 50 COMMENT '排序',
  `click_num` bigint(20) NULL DEFAULT NULL COMMENT '点击数',
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '友链简介',
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '逻辑删除 0 未删除 1 已删除',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '友情链接表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_friend_link
-- ----------------------------
INSERT INTO `lzh_friend_link` VALUES (1, '411工作室', 'http://101.42.177.4:9002/', 0, '1', 0, 50, 20, '411工作室', 'https://mybucket182.oss-cn-hangzhou.aliyuncs.com/4eb7f7f4-5b0d-40d3-ae79-95e0cba6c1c4.png', 0, '2023-05-27 20:03:10', '2023-05-27 20:03:26');
INSERT INTO `lzh_friend_link` VALUES (2, '宁波财经学院', 'https://www.nbufe.edu.cn/', 0, '0', 0, 50, 31, '宁波财经学院官网', 'http://1.117.218.230:9000/test/img_1685189088918.jpg', 0, '2023-05-27 20:03:10', '2023-05-27 20:04:53');
INSERT INTO `lzh_friend_link` VALUES (3, 'PERSEVERE-BLOG', 'http://lzhblog.top', 0, '1', 0, 50, 68, 'LZH的博客', 'http://1.117.218.230:9000/test/img_1685189106802.png', 0, '2023-05-27 20:03:10', '2023-10-14 08:48:14');

-- ----------------------------
-- Table structure for lzh_like_stat
-- ----------------------------
DROP TABLE IF EXISTS `lzh_like_stat`;
CREATE TABLE `lzh_like_stat`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'id',
  `liked_id` bigint(20) NOT NULL COMMENT '被点赞id',
  `liked_count` bigint(20) NOT NULL DEFAULT 0 COMMENT '点赞总数量',
  `del_flag` int(11) NOT NULL DEFAULT 0 COMMENT '是否逻辑删除',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uniq_info_num`(`liked_id`) USING BTREE,
  INDEX `idx_create_time`(`create_time`) USING BTREE,
  INDEX `idx_update_time`(`update_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '点赞统计表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_like_stat
-- ----------------------------

-- ----------------------------
-- Table structure for lzh_subscribe
-- ----------------------------
DROP TABLE IF EXISTS `lzh_subscribe`;
CREATE TABLE `lzh_subscribe`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `be_subscribe` bigint(20) NOT NULL DEFAULT 0 COMMENT '被关注者id',
  `subscribe` bigint(20) NOT NULL DEFAULT 0 COMMENT '关注者id',
  `status` tinyint(4) NOT NULL DEFAULT 0 COMMENT '关注关系存续状态，0-存在关注关系，1-取消关注',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后变更时间',
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '逻辑删除 0 未删除 1 已删除',
  PRIMARY KEY (`id`, `be_subscribe`, `subscribe`) USING BTREE,
  INDEX `idx_subscribe_status`(`subscribe`, `status`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1584370789774520322 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户关注关系表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_subscribe
-- ----------------------------
INSERT INTO `lzh_subscribe` VALUES (1584055894965182466, 2, 1, 0, '2023-02-02 14:46:46', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182467, 1, 2, 0, '2022-10-23 19:27:21', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182469, 3, 1, 0, '2022-10-23 16:40:20', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182470, 10, 1, 0, '2022-10-23 16:40:20', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182471, 11, 1, 0, '2022-10-23 15:56:43', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182472, 22, 1, 0, '2022-10-23 16:38:59', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182473, 20, 1, 0, '2023-02-02 14:46:51', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182474, 24, 1, 1, '2022-10-23 16:40:27', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182475, 29, 1, 0, '2022-10-23 16:40:20', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182476, 30, 1, 0, '2022-11-08 21:38:19', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182477, 3, 2, 0, '2022-10-23 19:28:04', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182478, 10, 2, 0, '2022-10-23 19:28:15', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182479, 20, 2, 0, '2022-10-23 19:28:15', 0);
INSERT INTO `lzh_subscribe` VALUES (1584055894965182480, 30, 2, 0, '2022-10-23 19:28:15', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144950998839298, 1, 30, 0, '2022-10-23 19:29:30', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554817, 2, 30, 0, '2022-10-23 19:29:29', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554818, 20, 30, 0, '2022-10-23 19:30:14', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554819, 20, 11, 0, '2022-10-23 19:30:42', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554820, 20, 3, 0, '2022-10-23 19:30:42', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554821, 20, 24, 0, '2022-10-23 19:30:42', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554822, 20, 29, 0, '2022-10-23 19:30:42', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554823, 20, 22, 0, '2022-10-23 19:30:42', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554824, 20, 14787164048662, 0, '2022-10-23 19:31:36', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554825, 20, 1578603364453953538, 0, '2022-10-24 18:48:54', 0);
INSERT INTO `lzh_subscribe` VALUES (1584144957835554826, 20, 1579691106277396482, 0, '2022-10-23 19:31:36', 0);
INSERT INTO `lzh_subscribe` VALUES (1584145680711266306, 1, 20, 0, '2022-10-23 19:44:37', 0);
INSERT INTO `lzh_subscribe` VALUES (1584145710197223426, 2, 20, 0, '2022-10-23 19:44:42', 0);
INSERT INTO `lzh_subscribe` VALUES (1584145735488876546, 29, 20, 0, '2022-10-23 19:32:30', 0);
INSERT INTO `lzh_subscribe` VALUES (1584145944763674625, 30, 20, 1, '2022-10-23 19:33:21', 0);
INSERT INTO `lzh_subscribe` VALUES (1584145957191397378, 1579691106277396482, 20, 0, '2022-10-23 19:33:23', 0);
INSERT INTO `lzh_subscribe` VALUES (1584145962270699522, 1578603364453953538, 20, 0, '2022-10-23 19:33:24', 0);
INSERT INTO `lzh_subscribe` VALUES (1584145968016896001, 14787164048662, 20, 0, '2022-10-23 19:33:25', 0);
INSERT INTO `lzh_subscribe` VALUES (1584370789774520321, 1, 1, 1, '2023-02-05 10:29:29', 0);

-- ----------------------------
-- Table structure for lzh_tag
-- ----------------------------
DROP TABLE IF EXISTS `lzh_tag`;
CREATE TABLE `lzh_tag`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标签名',
  `create_by` bigint(20) NULL DEFAULT NULL,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP,
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP,
  `sort` bigint(20) NULL DEFAULT 0 COMMENT '排序',
  `remark` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  `click_num` bigint(20) NULL DEFAULT 0 COMMENT '点击数',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1628993782942859267 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '标签' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_tag
-- ----------------------------
INSERT INTO `lzh_tag` VALUES (1, 'Mybatis', NULL, NULL, 0, '2022-01-11 09:20:50', '2022-09-24 13:02:20', 213, 'weqwe', 432);
INSERT INTO `lzh_tag` VALUES (2, 'SpringSecurity', NULL, NULL, 0, '2022-01-11 09:20:55', '2022-01-11 09:20:55', 4, 'security framework', 13);
INSERT INTO `lzh_tag` VALUES (4, 'Java', NULL, NULL, 0, '2022-01-13 15:22:43', '2022-01-13 15:22:43', 1, 'sdad', 3);
INSERT INTO `lzh_tag` VALUES (5, 'WAD', NULL, NULL, 0, '2022-01-13 15:22:47', '2022-01-13 15:22:47', 73, 'ASDAD', 43);
INSERT INTO `lzh_tag` VALUES (6, 'C#', NULL, NULL, 0, '2022-01-11 09:20:50', '2023-02-23 09:55:15', 5, NULL, 435);
INSERT INTO `lzh_tag` VALUES (7, 'C++', NULL, NULL, 0, '2022-01-11 09:20:55', '2023-02-05 09:55:18', 2, NULL, 54);
INSERT INTO `lzh_tag` VALUES (9, 'Spring', NULL, NULL, 0, '2022-01-13 15:22:43', '2023-02-11 09:55:22', 331, NULL, 55);
INSERT INTO `lzh_tag` VALUES (10, 'SpringBoot', NULL, NULL, 0, '2022-01-13 15:22:47', '2022-09-24 13:02:20', 6, NULL, 5);
INSERT INTO `lzh_tag` VALUES (11, 'MybatisPlus', NULL, NULL, 0, '2022-01-11 09:20:50', '2022-01-11 09:20:55', 7, NULL, 7);
INSERT INTO `lzh_tag` VALUES (12, 'SpringMVC', NULL, NULL, 0, '2022-01-11 09:20:55', '2022-01-13 15:22:43', 8, NULL, 52);
INSERT INTO `lzh_tag` VALUES (13, 'RabbitMQ', NULL, NULL, 0, '2022-01-13 15:22:43', '2022-01-13 15:22:47', 4, NULL, 95);
INSERT INTO `lzh_tag` VALUES (14, 'Python', NULL, NULL, 0, '2022-01-13 15:22:47', '2023-02-23 09:55:15', 33, NULL, 12);
INSERT INTO `lzh_tag` VALUES (15, '机器学习', NULL, NULL, 1, '2022-01-13 15:22:43', '2023-02-05 09:55:18', 675, NULL, 2);
INSERT INTO `lzh_tag` VALUES (16, 'MyCat', NULL, NULL, 0, '2022-01-13 15:22:47', '2023-02-11 09:55:22', 29, NULL, 72);
INSERT INTO `lzh_tag` VALUES (1628584864840237058, 'RocketMQ', NULL, NULL, 0, '2022-01-13 15:22:47', '2023-02-23 10:41:53', 1, NULL, 0);
INSERT INTO `lzh_tag` VALUES (1628585912761864194, 'JDBC', NULL, NULL, 0, '2023-02-23 10:41:53', '2023-02-23 10:41:53', 12, NULL, 0);
INSERT INTO `lzh_tag` VALUES (1628585912761864195, 'JVM', NULL, NULL, 0, '2023-02-23 13:37:33', '2023-02-23 13:37:33', 0, NULL, 0);
INSERT INTO `lzh_tag` VALUES (1628585912761864196, 'JUC', NULL, NULL, 0, '2023-02-23 13:37:44', '2023-02-23 13:37:44', 0, NULL, 0);
INSERT INTO `lzh_tag` VALUES (1628585912761864197, 'MyBatis-Plus', NULL, NULL, 0, '2023-02-23 13:38:02', '2023-02-23 13:38:02', 0, NULL, 0);
INSERT INTO `lzh_tag` VALUES (1628993782942859265, 'Netty', NULL, NULL, 0, '2023-02-24 13:42:37', '2023-02-24 13:42:37', 0, NULL, 0);
INSERT INTO `lzh_tag` VALUES (1628993782942859266, 'Docker', NULL, NULL, 0, '2023-05-31 21:40:38', '2023-05-31 21:40:38', 0, NULL, 0);

-- ----------------------------
-- Table structure for lzh_user_like
-- ----------------------------
DROP TABLE IF EXISTS `lzh_user_like`;
CREATE TABLE `lzh_user_like`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'id',
  `user_id` bigint(20) NOT NULL DEFAULT 0 COMMENT '用户id',
  `liked_id` bigint(20) NOT NULL COMMENT '被点赞的id',
  `liked_status` int(11) NOT NULL DEFAULT 0 COMMENT '点赞状态，0未点赞，1已点赞',
  `liked_type` int(11) NOT NULL DEFAULT 0 COMMENT '点赞的类型',
  `liked_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '点赞时间',
  `del_flag` int(11) NOT NULL DEFAULT 0 COMMENT '是否逻辑删除',
  `create_time` timestamp NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uniq_user_id_liked_id_type`(`user_id`, `liked_id`, `liked_type`) USING BTREE,
  INDEX `idx_liked_id`(`liked_id`) USING BTREE,
  INDEX `idx_create_time`(`create_time`) USING BTREE,
  INDEX `idx_update_time`(`update_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1663472392091119619 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户点赞表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_user_like
-- ----------------------------
INSERT INTO `lzh_user_like` VALUES (1, 1, 1, 0, 0, '2022-10-11 09:57:01', 0, '2022-10-09 18:45:33', '2022-10-11 09:57:01');
INSERT INTO `lzh_user_like` VALUES (2, 2, 1, 0, 0, '2022-10-12 10:05:35', 0, '2022-10-09 18:45:48', '2022-10-12 10:05:35');
INSERT INTO `lzh_user_like` VALUES (1579111706137899009, 1, 3, 0, 0, '2023-02-02 14:13:14', 0, '2022-10-09 22:09:04', '2023-02-02 14:13:14');
INSERT INTO `lzh_user_like` VALUES (1579275791802482689, 1, 2, 0, 0, '2023-02-02 14:13:35', 0, '2022-10-10 09:01:05', '2023-02-02 14:13:35');
INSERT INTO `lzh_user_like` VALUES (1579667549912707073, 1, 5, 1, 0, '2023-02-02 14:13:17', 0, '2022-10-11 10:57:47', '2023-02-02 14:13:17');
INSERT INTO `lzh_user_like` VALUES (1579722585007190017, 1, 9, 1, 0, '2022-10-15 20:13:54', 0, '2022-10-11 14:36:29', '2022-10-15 20:13:54');
INSERT INTO `lzh_user_like` VALUES (1579745048109735938, 1, 1579031502224822274, 1, 0, '2022-10-19 10:56:47', 0, '2022-10-11 16:05:44', '2022-10-19 10:56:47');
INSERT INTO `lzh_user_like` VALUES (1579745123267469314, 1, 1578333695557947393, 1, 0, NULL, 0, '2022-10-11 16:06:02', '2022-10-11 16:06:02');
INSERT INTO `lzh_user_like` VALUES (1579745140183097346, 1, 1576527547464937474, 1, 0, '2023-02-02 14:13:24', 0, '2022-10-11 16:06:06', '2023-02-02 14:13:24');
INSERT INTO `lzh_user_like` VALUES (1579745155710410754, 1, 10, 1, 0, '2022-11-07 18:07:57', 0, '2022-10-11 16:06:10', '2022-11-07 18:07:57');
INSERT INTO `lzh_user_like` VALUES (1579745468429328386, 1, 1579730661248593922, 1, 0, '2022-10-25 14:01:14', 0, '2022-10-11 16:07:25', '2022-10-25 14:01:14');
INSERT INTO `lzh_user_like` VALUES (1579745506601689089, 1, 1579692483556806657, 1, 0, '2022-10-13 20:08:27', 0, '2022-10-11 16:07:34', '2022-10-13 20:08:27');
INSERT INTO `lzh_user_like` VALUES (1579745593662857218, 1, 8, 1, 0, '2022-11-07 18:59:16', 0, '2022-10-11 16:07:54', '2022-11-07 18:59:16');
INSERT INTO `lzh_user_like` VALUES (1579790537408516097, 1, 1576928390408253442, 1, 0, NULL, 0, '2022-10-11 19:06:30', '2022-10-11 19:06:30');
INSERT INTO `lzh_user_like` VALUES (1579791546608390145, 1, 1579034777426792450, 0, 0, '2022-10-13 20:09:42', 0, '2022-10-11 19:10:30', '2022-10-13 20:09:42');
INSERT INTO `lzh_user_like` VALUES (1579791562777432065, 1, 1579035117211553793, 1, 0, '2022-10-13 20:08:26', 0, '2022-10-11 19:10:34', '2022-10-13 20:08:26');
INSERT INTO `lzh_user_like` VALUES (1579798235864879105, 1, 1579798069829046273, 1, 0, '2022-10-12 09:09:39', 0, '2022-10-11 19:37:05', '2022-10-12 09:09:39');
INSERT INTO `lzh_user_like` VALUES (1579804568773185537, 1, 1579798362625134593, 1, 0, '2022-10-11 20:02:24', 0, '2022-10-11 20:02:15', '2022-10-11 20:02:24');
INSERT INTO `lzh_user_like` VALUES (1580004049552576513, 1, 1580003318506323970, 1, 0, '2022-10-15 20:15:34', 0, '2022-10-12 09:14:55', '2022-10-15 20:15:34');
INSERT INTO `lzh_user_like` VALUES (1580004071597838338, 1, 1580002217321168897, 1, 0, '2022-10-14 09:41:21', 0, '2022-10-12 09:15:00', '2022-10-14 09:41:21');
INSERT INTO `lzh_user_like` VALUES (1580012925089910786, 2, 2, 0, 0, '2022-10-23 19:00:46', 0, '2022-10-12 09:50:11', '2022-10-23 19:00:46');
INSERT INTO `lzh_user_like` VALUES (1580013004186095617, 2, 3, 1, 0, '2022-10-12 10:07:29', 0, '2022-10-12 09:50:30', '2022-10-12 10:07:29');
INSERT INTO `lzh_user_like` VALUES (1580013031918833666, 2, 9, 1, 0, NULL, 0, '2022-10-12 09:50:37', '2022-10-12 09:50:37');
INSERT INTO `lzh_user_like` VALUES (1580013051506233345, 2, 1580003318506323970, 1, 0, '2022-10-12 10:16:29', 0, '2022-10-12 09:50:41', '2022-10-12 10:16:29');
INSERT INTO `lzh_user_like` VALUES (1580015448714547201, 2, 5, 0, 0, '2022-10-12 10:00:13', 0, '2022-10-12 10:00:13', '2022-10-12 10:00:13');
INSERT INTO `lzh_user_like` VALUES (1580019538261692417, 2, 1580002217321168897, 1, 0, NULL, 0, '2022-10-12 10:16:28', '2022-10-12 10:16:28');
INSERT INTO `lzh_user_like` VALUES (1580019568947220481, 2, 1580001549915234305, 1, 0, NULL, 0, '2022-10-12 10:16:35', '2022-10-12 10:16:35');
INSERT INTO `lzh_user_like` VALUES (1580531358764257281, 1, 1580001549915234305, 1, 0, '2022-10-13 20:10:16', 0, '2022-10-13 20:10:15', '2022-10-13 20:10:16');
INSERT INTO `lzh_user_like` VALUES (1580746616984510465, 2, 8, 1, 0, NULL, 0, '2022-10-14 10:25:37', '2022-10-14 10:25:37');
INSERT INTO `lzh_user_like` VALUES (1580782373090566145, 1, 1580782348893626370, 1, 0, '2023-05-22 08:10:11', 0, '2022-10-14 12:47:42', '2023-05-22 08:10:11');
INSERT INTO `lzh_user_like` VALUES (1580873834318524418, 1578603364453953538, 2, 1, 0, NULL, 0, '2022-10-14 18:51:08', '2022-10-14 18:51:08');
INSERT INTO `lzh_user_like` VALUES (1580873843210448897, 1578603364453953538, 3, 1, 0, NULL, 0, '2022-10-14 18:51:10', '2022-10-14 18:51:10');
INSERT INTO `lzh_user_like` VALUES (1580874120554606594, 1578603364453953538, 1576527547464937474, 1, 0, NULL, 0, '2022-10-14 18:52:16', '2022-10-14 18:52:16');
INSERT INTO `lzh_user_like` VALUES (1580875315104968705, 1578603364453953538, 1580782348893626370, 1, 0, NULL, 0, '2022-10-14 18:57:01', '2022-10-14 18:57:01');
INSERT INTO `lzh_user_like` VALUES (1581248833512415233, 1, 1581248764574834689, 1, 0, '2022-10-25 13:20:34', 0, '2022-10-15 19:41:15', '2022-10-25 13:20:34');
INSERT INTO `lzh_user_like` VALUES (1581257072064991234, 1, 1580876557625585665, 1, 0, '2022-10-16 11:28:23', 0, '2022-10-15 20:13:59', '2022-10-16 11:28:23');
INSERT INTO `lzh_user_like` VALUES (1581523542518935554, 1, 1581523482204844033, 1, 0, '2022-10-16 14:08:48', 0, '2022-10-16 13:52:50', '2022-10-16 14:08:48');
INSERT INTO `lzh_user_like` VALUES (1584138931505602562, 2, 1581248764574834689, 1, 0, NULL, 0, '2022-10-23 19:05:28', '2022-10-23 19:05:28');
INSERT INTO `lzh_user_like` VALUES (1584138970034479106, 2, 1579035117211553793, 1, 0, NULL, 0, '2022-10-23 19:05:37', '2022-10-23 19:05:37');
INSERT INTO `lzh_user_like` VALUES (1584776966584807426, 1, 1581491547428610050, 0, 0, '2022-10-25 13:20:53', 0, '2022-10-25 13:20:47', '2022-10-25 13:20:53');
INSERT INTO `lzh_user_like` VALUES (1584795456507199490, 1, 1584795396985831425, 0, 0, '2022-10-25 14:34:35', 0, '2022-10-25 14:34:16', '2022-10-25 14:34:35');
INSERT INTO `lzh_user_like` VALUES (1589422798355304449, 1, 1589422745435770881, 0, 0, '2022-11-07 16:22:24', 0, '2022-11-07 09:01:40', '2022-11-07 16:22:24');
INSERT INTO `lzh_user_like` VALUES (1589533057421963266, 1, 1584804994513879042, 0, 0, '2022-11-07 16:19:48', 0, '2022-11-07 16:19:48', '2022-11-07 16:19:48');
INSERT INTO `lzh_user_like` VALUES (1589570248743358466, 1, 1589570183937167361, 1, 0, '2022-11-07 18:47:40', 0, '2022-11-07 18:47:35', '2022-11-07 18:47:40');
INSERT INTO `lzh_user_like` VALUES (1589571251983126530, 1, 1589570781973614594, 0, 0, '2022-11-07 18:51:35', 0, '2022-11-07 18:51:34', '2022-11-07 18:51:35');
INSERT INTO `lzh_user_like` VALUES (1589621467016921090, 1, 1589618524242935810, 0, 0, '2023-02-02 14:13:21', 0, '2022-11-07 22:11:06', '2023-02-02 14:13:21');
INSERT INTO `lzh_user_like` VALUES (1590214160973594625, 30, 2, 0, 0, '2022-11-09 13:26:16', 0, '2022-11-09 13:26:15', '2022-11-09 13:26:16');
INSERT INTO `lzh_user_like` VALUES (1659891784492384257, 1, 1627899980027076609, 0, 0, '2023-05-20 20:00:25', 0, '2023-05-20 20:00:15', '2023-05-20 20:00:25');
INSERT INTO `lzh_user_like` VALUES (1662431466409291778, 1, 1662430187142406145, 1, 0, '2023-05-30 17:08:59', 0, '2023-05-27 20:12:03', '2023-05-30 17:08:59');
INSERT INTO `lzh_user_like` VALUES (1662701516106141697, 1, 1662696030996729857, 1, 0, '2023-05-28 14:05:12', 0, '2023-05-28 14:05:08', '2023-05-28 14:05:12');
INSERT INTO `lzh_user_like` VALUES (1662702159881474050, 1, 1662435411705982977, 1, 0, '2023-05-28 21:22:38', 0, '2023-05-28 14:07:41', '2023-05-28 21:22:38');
INSERT INTO `lzh_user_like` VALUES (1662758380164546561, 1, 1662432903277207554, 0, 0, '2023-05-30 17:09:31', 0, '2023-05-28 17:51:05', '2023-05-30 17:09:31');
INSERT INTO `lzh_user_like` VALUES (1662805124818653186, 1, 0, 1, 0, '2023-05-30 17:09:01', 0, '2023-05-28 20:56:50', '2023-05-30 17:09:01');
INSERT INTO `lzh_user_like` VALUES (1663468629787910146, 1, 1663468503749074946, 0, 0, '2023-05-30 17:08:25', 0, '2023-05-30 16:53:22', '2023-05-30 17:08:25');
INSERT INTO `lzh_user_like` VALUES (1663470403546488834, 1, 1663466784667443201, 1, 0, '2023-05-30 17:08:22', 0, '2023-05-30 17:00:25', '2023-05-30 17:08:22');
INSERT INTO `lzh_user_like` VALUES (1663472380082827265, 1, 1663467371689648129, 1, 0, '2023-05-30 17:09:08', 0, '2023-05-30 17:08:16', '2023-05-30 17:09:08');
INSERT INTO `lzh_user_like` VALUES (1663472392091119618, 1, 1663468889046228993, 1, 0, NULL, 0, '2023-05-30 17:08:19', '2023-05-30 17:08:19');

-- ----------------------------
-- Table structure for lzh_user_status
-- ----------------------------
DROP TABLE IF EXISTS `lzh_user_status`;
CREATE TABLE `lzh_user_status`  (
  `id` int(11) NOT NULL,
  `fan_count` bigint(20) NULL DEFAULT NULL COMMENT '粉丝数',
  `view_count` bigint(20) NULL DEFAULT NULL COMMENT '总浏览量',
  `follow_count` bigint(20) NULL DEFAULT NULL COMMENT '关注数',
  `article_count` bigint(20) NULL DEFAULT NULL COMMENT '创作文章数',
  `collect_count` bigint(20) NULL DEFAULT NULL COMMENT '收藏数',
  `point_count` bigint(20) NULL DEFAULT NULL COMMENT '积分数',
  `like_count` bigint(20) NULL DEFAULT NULL COMMENT '点赞数',
  `del_flag` int(11) NULL DEFAULT NULL COMMENT '逻辑删除',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of lzh_user_status
-- ----------------------------

-- ----------------------------
-- Table structure for sys_disposition
-- ----------------------------
DROP TABLE IF EXISTS `sys_disposition`;
CREATE TABLE `sys_disposition`  (
  `id` int(11) NOT NULL,
  `setting` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '配置',
  `set_value` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '配置值',
  `create_time` datetime NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_disposition
-- ----------------------------
INSERT INTO `sys_disposition` VALUES (1, 'CAROUSEL_IMG_NUM', '5', '2023-09-16 19:31:47', NULL, 0);
INSERT INTO `sys_disposition` VALUES (2, 'WEBSITE_RUNTIME', '270', '2023-09-16 19:31:47', '2023-10-15 01:00:00', 0);
INSERT INTO `sys_disposition` VALUES (3, 'CAROUSEL_IMG_ORDER', 'desc', '2023-09-16 19:31:47', NULL, 0);

-- ----------------------------
-- Table structure for sys_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '菜单ID',
  `menu_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '菜单名称',
  `parent_id` bigint(20) NULL DEFAULT 0 COMMENT '父菜单ID',
  `order_num` int(11) NULL DEFAULT 0 COMMENT '显示顺序',
  `path` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '路由地址',
  `component` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '组件路径',
  `is_frame` int(11) NULL DEFAULT 1 COMMENT '是否为外链（0是 1否）',
  `menu_type` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '菜单类型（M目录 C菜单 F按钮）',
  `visible` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '菜单状态（0显示 1隐藏）',
  `status` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '菜单状态（0正常 1停用）',
  `perms` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '权限标识',
  `icon` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '#' COMMENT '菜单图标',
  `create_by` bigint(20) NULL DEFAULT NULL COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` bigint(20) NULL DEFAULT NULL COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '备注',
  `del_flag` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2029 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '菜单权限表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_menu
-- ----------------------------
INSERT INTO `sys_menu` VALUES (1, '系统管理', 0, 1, 'system', NULL, 1, 'M', '0', '0', '', 'system', 0, '2021-11-12 10:46:19', 0, NULL, '系统管理目录', '0');
INSERT INTO `sys_menu` VALUES (100, '用户管理', 1, 1, 'user', 'system/user/index', 1, 'C', '0', '0', 'system:user:list', 'user', 0, '2021-11-12 10:46:19', 1, '2022-07-31 15:47:58', '用户管理菜单', '0');
INSERT INTO `sys_menu` VALUES (101, '角色管理', 1, 2, 'role', 'system/role/index', 1, 'C', '0', '0', 'system:role:list', 'peoples', 0, '2021-11-12 10:46:19', 0, NULL, '角色管理菜单', '0');
INSERT INTO `sys_menu` VALUES (102, '菜单管理', 1, 3, 'menu', 'system/menu/index', 1, 'C', '0', '0', 'system:menu:list', 'tree-table', 0, '2021-11-12 10:46:19', 0, NULL, '菜单管理菜单', '0');
INSERT INTO `sys_menu` VALUES (1001, '用户查询', 100, 1, '', '', 1, 'F', '0', '0', 'system:user:query', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1002, '用户新增', 100, 2, '', '', 1, 'F', '0', '0', 'system:user:add', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1003, '用户修改', 100, 3, '', '', 1, 'F', '0', '0', 'system:user:edit', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1004, '用户删除', 100, 4, '', '', 1, 'F', '0', '0', 'system:user:remove', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1005, '用户导出', 100, 5, '', '', 1, 'F', '0', '0', 'system:user:export', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1006, '用户导入', 100, 6, '', '', 1, 'F', '0', '0', 'system:user:import', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1007, '重置密码', 100, 7, '', '', 1, 'F', '0', '0', 'system:user:resetPwd', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1008, '角色查询', 101, 1, '', '', 1, 'F', '0', '0', 'system:role:query', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1009, '角色新增', 101, 2, '', '', 1, 'F', '0', '0', 'system:role:add', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1010, '角色修改', 101, 3, '', '', 1, 'F', '0', '0', 'system:role:edit', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1011, '角色删除', 101, 4, '', '', 1, 'F', '0', '0', 'system:role:remove', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1012, '角色导出', 101, 5, '', '', 1, 'F', '0', '0', 'system:role:export', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1013, '菜单查询', 102, 1, '', '', 1, 'F', '0', '0', 'system:menu:query', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1014, '菜单新增', 102, 2, '', '', 1, 'F', '0', '0', 'system:menu:add', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1015, '菜单修改', 102, 3, '', '', 1, 'F', '0', '0', 'system:menu:edit', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1016, '菜单删除', 102, 4, '', '', 1, 'F', '0', '0', 'system:menu:remove', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (2017, '内容管理', 0, 4, 'content', NULL, 1, 'M', '0', '0', NULL, 'table', NULL, '2022-01-08 02:44:38', 1, '2022-07-31 12:34:23', '', '0');
INSERT INTO `sys_menu` VALUES (2018, '分类管理', 2017, 1, 'category', 'content/category/index', 1, 'C', '0', '0', 'content:category:list', 'example', NULL, '2022-01-08 02:51:45', NULL, '2022-01-08 02:51:45', '', '0');
INSERT INTO `sys_menu` VALUES (2019, '文章管理', 2017, 0, 'article', 'content/article/index', 1, 'C', '0', '0', 'content:article:list', 'build', NULL, '2022-01-08 02:53:10', NULL, '2022-01-08 02:53:10', '', '0');
INSERT INTO `sys_menu` VALUES (2021, '标签管理', 2017, 6, 'tag', 'content/tag/index', 1, 'C', '0', '0', 'content:tag:index', 'button', NULL, '2022-01-08 02:55:37', NULL, '2022-01-08 02:55:50', '', '0');
INSERT INTO `sys_menu` VALUES (2022, '友链管理', 2017, 4, 'link', 'content/link/index', 1, 'C', '0', '0', 'content:link:list', '404', NULL, '2022-01-08 02:56:50', NULL, '2022-01-08 02:56:50', '', '0');
INSERT INTO `sys_menu` VALUES (2023, '写博文', 0, 0, 'write', 'content/article/write/index', 1, 'C', '0', '0', 'content:article:writer', 'build', NULL, '2022-01-08 03:39:58', 1, '2022-07-31 22:07:05', '', '0');
INSERT INTO `sys_menu` VALUES (2024, '友链新增', 2022, 0, '', NULL, 1, 'F', '0', '0', 'content:link:add', '#', NULL, '2022-01-16 07:59:17', NULL, '2022-01-16 07:59:17', '', '0');
INSERT INTO `sys_menu` VALUES (2025, '友链修改', 2022, 1, '', NULL, 1, 'F', '0', '0', 'content:link:edit', '#', NULL, '2022-01-16 07:59:44', NULL, '2022-01-16 07:59:44', '', '0');
INSERT INTO `sys_menu` VALUES (2026, '友链删除', 2022, 1, '', NULL, 1, 'F', '0', '0', 'content:link:remove', '#', NULL, '2022-01-16 08:00:05', NULL, '2022-01-16 08:00:05', '', '0');
INSERT INTO `sys_menu` VALUES (2027, '友链查询', 2022, 2, '', NULL, 1, 'F', '0', '0', 'content:link:query', '#', NULL, '2022-01-16 08:04:09', NULL, '2022-01-16 08:04:09', '', '0');
INSERT INTO `sys_menu` VALUES (2028, '导出分类', 2018, 1, '', NULL, 1, 'F', '0', '0', 'content:category:export', '#', NULL, '2022-01-21 07:06:59', NULL, '2022-01-21 07:06:59', '', '0');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '角色ID',
  `role_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色名称',
  `role_key` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色权限字符串',
  `role_sort` int(11) NOT NULL COMMENT '显示顺序',
  `status` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色状态（0正常 1停用）',
  `del_flag` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '删除标志（0代表存在 1代表删除）',
  `create_by` bigint(20) NULL DEFAULT NULL COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` bigint(20) NULL DEFAULT NULL COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '角色信息表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES (1, '超级管理员', 'admin', 1, '0', '0', 0, '2021-11-12 10:46:19', 0, NULL, '超级管理员');
INSERT INTO `sys_role` VALUES (2, '普通角色', 'common', 2, '0', '0', 0, '2021-11-12 10:46:19', 0, '2022-01-01 22:32:58', '普通角色');
INSERT INTO `sys_role` VALUES (11, '嘎嘎嘎', 'aggag', 5, '0', '0', NULL, '2022-01-06 14:07:40', NULL, '2022-01-07 03:48:48', '嘎嘎嘎');
INSERT INTO `sys_role` VALUES (12, '友链审核员', 'link', 1, '0', '0', NULL, '2022-01-16 06:49:30', NULL, '2022-01-16 08:05:09', NULL);

-- ----------------------------
-- Table structure for sys_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_menu`;
CREATE TABLE `sys_role_menu`  (
  `role_id` bigint(20) NOT NULL COMMENT '角色ID',
  `menu_id` bigint(20) NOT NULL COMMENT '菜单ID',
  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '角色和菜单关联表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_role_menu
-- ----------------------------
INSERT INTO `sys_role_menu` VALUES (0, 0);
INSERT INTO `sys_role_menu` VALUES (1, 1);
INSERT INTO `sys_role_menu` VALUES (1, 101);
INSERT INTO `sys_role_menu` VALUES (2, 1);
INSERT INTO `sys_role_menu` VALUES (2, 102);
INSERT INTO `sys_role_menu` VALUES (2, 1013);
INSERT INTO `sys_role_menu` VALUES (2, 1014);
INSERT INTO `sys_role_menu` VALUES (2, 1015);
INSERT INTO `sys_role_menu` VALUES (2, 1016);
INSERT INTO `sys_role_menu` VALUES (2, 2000);
INSERT INTO `sys_role_menu` VALUES (3, 2);
INSERT INTO `sys_role_menu` VALUES (3, 3);
INSERT INTO `sys_role_menu` VALUES (3, 4);
INSERT INTO `sys_role_menu` VALUES (3, 100);
INSERT INTO `sys_role_menu` VALUES (3, 101);
INSERT INTO `sys_role_menu` VALUES (3, 103);
INSERT INTO `sys_role_menu` VALUES (3, 104);
INSERT INTO `sys_role_menu` VALUES (3, 105);
INSERT INTO `sys_role_menu` VALUES (3, 106);
INSERT INTO `sys_role_menu` VALUES (3, 107);
INSERT INTO `sys_role_menu` VALUES (3, 108);
INSERT INTO `sys_role_menu` VALUES (3, 109);
INSERT INTO `sys_role_menu` VALUES (3, 110);
INSERT INTO `sys_role_menu` VALUES (3, 111);
INSERT INTO `sys_role_menu` VALUES (3, 112);
INSERT INTO `sys_role_menu` VALUES (3, 113);
INSERT INTO `sys_role_menu` VALUES (3, 114);
INSERT INTO `sys_role_menu` VALUES (3, 115);
INSERT INTO `sys_role_menu` VALUES (3, 116);
INSERT INTO `sys_role_menu` VALUES (3, 500);
INSERT INTO `sys_role_menu` VALUES (3, 501);
INSERT INTO `sys_role_menu` VALUES (3, 1001);
INSERT INTO `sys_role_menu` VALUES (3, 1002);
INSERT INTO `sys_role_menu` VALUES (3, 1003);
INSERT INTO `sys_role_menu` VALUES (3, 1004);
INSERT INTO `sys_role_menu` VALUES (3, 1005);
INSERT INTO `sys_role_menu` VALUES (3, 1006);
INSERT INTO `sys_role_menu` VALUES (3, 1007);
INSERT INTO `sys_role_menu` VALUES (3, 1008);
INSERT INTO `sys_role_menu` VALUES (3, 1009);
INSERT INTO `sys_role_menu` VALUES (3, 1010);
INSERT INTO `sys_role_menu` VALUES (3, 1011);
INSERT INTO `sys_role_menu` VALUES (3, 1012);
INSERT INTO `sys_role_menu` VALUES (3, 1017);
INSERT INTO `sys_role_menu` VALUES (3, 1018);
INSERT INTO `sys_role_menu` VALUES (3, 1019);
INSERT INTO `sys_role_menu` VALUES (3, 1020);
INSERT INTO `sys_role_menu` VALUES (3, 1021);
INSERT INTO `sys_role_menu` VALUES (3, 1022);
INSERT INTO `sys_role_menu` VALUES (3, 1023);
INSERT INTO `sys_role_menu` VALUES (3, 1024);
INSERT INTO `sys_role_menu` VALUES (3, 1025);
INSERT INTO `sys_role_menu` VALUES (3, 1026);
INSERT INTO `sys_role_menu` VALUES (3, 1027);
INSERT INTO `sys_role_menu` VALUES (3, 1028);
INSERT INTO `sys_role_menu` VALUES (3, 1029);
INSERT INTO `sys_role_menu` VALUES (3, 1030);
INSERT INTO `sys_role_menu` VALUES (3, 1031);
INSERT INTO `sys_role_menu` VALUES (3, 1032);
INSERT INTO `sys_role_menu` VALUES (3, 1033);
INSERT INTO `sys_role_menu` VALUES (3, 1034);
INSERT INTO `sys_role_menu` VALUES (3, 1035);
INSERT INTO `sys_role_menu` VALUES (3, 1036);
INSERT INTO `sys_role_menu` VALUES (3, 1037);
INSERT INTO `sys_role_menu` VALUES (3, 1038);
INSERT INTO `sys_role_menu` VALUES (3, 1039);
INSERT INTO `sys_role_menu` VALUES (3, 1040);
INSERT INTO `sys_role_menu` VALUES (3, 1041);
INSERT INTO `sys_role_menu` VALUES (3, 1042);
INSERT INTO `sys_role_menu` VALUES (3, 1043);
INSERT INTO `sys_role_menu` VALUES (3, 1044);
INSERT INTO `sys_role_menu` VALUES (3, 1045);
INSERT INTO `sys_role_menu` VALUES (3, 1046);
INSERT INTO `sys_role_menu` VALUES (3, 1047);
INSERT INTO `sys_role_menu` VALUES (3, 1048);
INSERT INTO `sys_role_menu` VALUES (3, 1049);
INSERT INTO `sys_role_menu` VALUES (3, 1050);
INSERT INTO `sys_role_menu` VALUES (3, 1051);
INSERT INTO `sys_role_menu` VALUES (3, 1052);
INSERT INTO `sys_role_menu` VALUES (3, 1053);
INSERT INTO `sys_role_menu` VALUES (3, 1054);
INSERT INTO `sys_role_menu` VALUES (3, 1055);
INSERT INTO `sys_role_menu` VALUES (3, 1056);
INSERT INTO `sys_role_menu` VALUES (3, 1057);
INSERT INTO `sys_role_menu` VALUES (3, 1058);
INSERT INTO `sys_role_menu` VALUES (3, 1059);
INSERT INTO `sys_role_menu` VALUES (3, 1060);
INSERT INTO `sys_role_menu` VALUES (3, 2000);
INSERT INTO `sys_role_menu` VALUES (11, 1);
INSERT INTO `sys_role_menu` VALUES (11, 100);
INSERT INTO `sys_role_menu` VALUES (11, 101);
INSERT INTO `sys_role_menu` VALUES (11, 102);
INSERT INTO `sys_role_menu` VALUES (11, 103);
INSERT INTO `sys_role_menu` VALUES (11, 104);
INSERT INTO `sys_role_menu` VALUES (11, 105);
INSERT INTO `sys_role_menu` VALUES (11, 106);
INSERT INTO `sys_role_menu` VALUES (11, 107);
INSERT INTO `sys_role_menu` VALUES (11, 108);
INSERT INTO `sys_role_menu` VALUES (11, 500);
INSERT INTO `sys_role_menu` VALUES (11, 501);
INSERT INTO `sys_role_menu` VALUES (11, 1001);
INSERT INTO `sys_role_menu` VALUES (11, 1002);
INSERT INTO `sys_role_menu` VALUES (11, 1003);
INSERT INTO `sys_role_menu` VALUES (11, 1004);
INSERT INTO `sys_role_menu` VALUES (11, 1005);
INSERT INTO `sys_role_menu` VALUES (11, 1006);
INSERT INTO `sys_role_menu` VALUES (11, 1007);
INSERT INTO `sys_role_menu` VALUES (11, 1008);
INSERT INTO `sys_role_menu` VALUES (11, 1009);
INSERT INTO `sys_role_menu` VALUES (11, 1010);
INSERT INTO `sys_role_menu` VALUES (11, 1011);
INSERT INTO `sys_role_menu` VALUES (11, 1012);
INSERT INTO `sys_role_menu` VALUES (11, 1013);
INSERT INTO `sys_role_menu` VALUES (11, 1014);
INSERT INTO `sys_role_menu` VALUES (11, 1015);
INSERT INTO `sys_role_menu` VALUES (11, 1016);
INSERT INTO `sys_role_menu` VALUES (11, 1017);
INSERT INTO `sys_role_menu` VALUES (11, 1018);
INSERT INTO `sys_role_menu` VALUES (11, 1019);
INSERT INTO `sys_role_menu` VALUES (11, 1020);
INSERT INTO `sys_role_menu` VALUES (11, 1021);
INSERT INTO `sys_role_menu` VALUES (11, 1022);
INSERT INTO `sys_role_menu` VALUES (11, 1023);
INSERT INTO `sys_role_menu` VALUES (11, 1024);
INSERT INTO `sys_role_menu` VALUES (11, 1025);
INSERT INTO `sys_role_menu` VALUES (11, 1026);
INSERT INTO `sys_role_menu` VALUES (11, 1027);
INSERT INTO `sys_role_menu` VALUES (11, 1028);
INSERT INTO `sys_role_menu` VALUES (11, 1029);
INSERT INTO `sys_role_menu` VALUES (11, 1030);
INSERT INTO `sys_role_menu` VALUES (11, 1031);
INSERT INTO `sys_role_menu` VALUES (11, 1032);
INSERT INTO `sys_role_menu` VALUES (11, 1033);
INSERT INTO `sys_role_menu` VALUES (11, 1034);
INSERT INTO `sys_role_menu` VALUES (11, 1035);
INSERT INTO `sys_role_menu` VALUES (11, 1036);
INSERT INTO `sys_role_menu` VALUES (11, 1037);
INSERT INTO `sys_role_menu` VALUES (11, 1038);
INSERT INTO `sys_role_menu` VALUES (11, 1039);
INSERT INTO `sys_role_menu` VALUES (11, 1040);
INSERT INTO `sys_role_menu` VALUES (11, 1041);
INSERT INTO `sys_role_menu` VALUES (11, 1042);
INSERT INTO `sys_role_menu` VALUES (11, 1043);
INSERT INTO `sys_role_menu` VALUES (11, 1044);
INSERT INTO `sys_role_menu` VALUES (11, 1045);
INSERT INTO `sys_role_menu` VALUES (11, 2000);
INSERT INTO `sys_role_menu` VALUES (11, 2003);
INSERT INTO `sys_role_menu` VALUES (11, 2004);
INSERT INTO `sys_role_menu` VALUES (11, 2005);
INSERT INTO `sys_role_menu` VALUES (11, 2006);
INSERT INTO `sys_role_menu` VALUES (11, 2007);
INSERT INTO `sys_role_menu` VALUES (11, 2008);
INSERT INTO `sys_role_menu` VALUES (11, 2009);
INSERT INTO `sys_role_menu` VALUES (11, 2010);
INSERT INTO `sys_role_menu` VALUES (11, 2011);
INSERT INTO `sys_role_menu` VALUES (11, 2012);
INSERT INTO `sys_role_menu` VALUES (11, 2013);
INSERT INTO `sys_role_menu` VALUES (11, 2014);
INSERT INTO `sys_role_menu` VALUES (12, 2017);
INSERT INTO `sys_role_menu` VALUES (12, 2022);
INSERT INTO `sys_role_menu` VALUES (12, 2024);
INSERT INTO `sys_role_menu` VALUES (12, 2025);
INSERT INTO `sys_role_menu` VALUES (12, 2026);
INSERT INTO `sys_role_menu` VALUES (12, 2027);

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'NULL' COMMENT '用户名',
  `nick_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'NULL' COMMENT '昵称',
  `password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'NULL' COMMENT '密码',
  `type` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '用户类型：0代表普通用户，1代表管理员',
  `status` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '账号状态（0正常 1停用）',
  `email` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `phonenumber` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '手机号',
  `sex` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户性别（0男，1女，2未知）',
  `address` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '地址',
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  `avatar` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `create_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人的用户id',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` bigint(20) NULL DEFAULT NULL COMMENT '更新人',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1579691106277396483 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES (1, 'lzh', '声声慢', '$2a$10$9UcCIUI49qExTid8xCF/2OPTv4vqwjN9OYHEfdtTcBwVIAM4BHsoS', '1', '0', '1203464373@qq.com', '13175932620', '0', '浙江省宁波市海曙区', 'PERSEVERE-BLOG\nWELCOME TO MY BLOG\nNever forget why you started!', 'http://118.89.125.143:9000/lzh-blog/img_1697351575988', NULL, '2022-01-05 09:01:56', 1, '2023-10-15 14:32:56', 0);
INSERT INTO `sys_user` VALUES (2, 'lisi', 'xiaoli', '$2a$10$MaFiiwNV45glvPXYVlRt5.kMatuYD/mLzSAirVwZThZnKU.CjxcLC', '0', '0', 'weixin@qq.com', '12312341234', '0', '浙江宁波', 'Never forget why you started!', 'https://img1.baidu.com/it/u=1659441821,1293635445&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', -1, '2022-01-30 17:18:44', -1, '2022-01-30 17:18:44', 0);
INSERT INTO `sys_user` VALUES (3, 'zhangming', 'zhangming', '$2a$10$MaFiiwNV45glvPXYVlRt5.kMatuYD/mLzSAirVwZThZnKU.CjxcLC', '0', '0', NULL, NULL, '0', '浙江宁波', 'Never forget why you started!', 'https://img0.baidu.com/it/u=825023390,3429989944&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_user` VALUES (10, 'lihua', 'lihua', '$2a$10$MaFiiwNV45glvPXYVlRt5.kMatuYD/mLzSAirVwZThZnKU.CjxcLC', '0', '0', NULL, NULL, '0', '浙江宁波', 'Never forget why you started!', 'https://img0.baidu.com/it/u=825023390,3429989944&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_user` VALUES (11, 'xiaoming', 'xiaoming', '$2a$10$ffgpMr04F4lOfs.Q86W88.4/sURUoXYOaw3NfhFfG/2111bKCkTre', '0', '0', 'l13758395941@163.com', NULL, '1', '浙江宁波', 'Never forget why you started!', 'https://img0.baidu.com/it/u=825023390,3429989944&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', NULL, '2022-10-03 20:23:29', NULL, '2022-10-03 20:23:29', 0);
INSERT INTO `sys_user` VALUES (20, 'lihong', '李红', '$2a$10$MaFiiwNV45glvPXYVlRt5.kMatuYD/mLzSAirVwZThZnKU.CjxcLC', '0', '0', NULL, NULL, '1', '浙江宁波', 'Never forget why you started!', 'https://img1.baidu.com/it/u=592570905,1313515675&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', NULL, NULL, NULL, '2022-10-23 19:46:12', 0);
INSERT INTO `sys_user` VALUES (22, 'liming', 'liming', '$2a$10$MaFiiwNV45glvPXYVlRt5.kMatuYD/mLzSAirVwZThZnKU.CjxcLC', '0', '0', NULL, NULL, '1', '浙江宁波', 'Never forget why you started!', 'https://img1.baidu.com/it/u=1659441821,1293635445&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_user` VALUES (24, 'wangwu', 'wangwu', '$2a$10$MaFiiwNV45glvPXYVlRt5.kMatuYD/mLzSAirVwZThZnKU.CjxcLC', '0', '0', NULL, NULL, '1', '浙江宁波', 'Never forget why you started!', 'https://img0.baidu.com/it/u=825023390,3429989944&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_user` VALUES (29, 'tom', 'tom', '$2a$10$MaFiiwNV45glvPXYVlRt5.kMatuYD/mLzSAirVwZThZnKU.CjxcLC', '0', '0', NULL, NULL, '1', '浙江宁波', 'Never forget why you started!', 'https://img0.baidu.com/it/u=3596636266,3550539430&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_user` VALUES (30, 'zhangsan', 'zhangsan', '$2a$10$MaFiiwNV45glvPXYVlRt5.kMatuYD/mLzSAirVwZThZnKU.CjxcLC', '0', '0', '1203464373@qq.com', NULL, '1', '浙江宁波', 'Never forget why you started!', 'https://img0.baidu.com/it/u=825023390,3429989944&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', NULL, NULL, NULL, '2022-10-25 20:06:53', 0);
INSERT INTO `sys_user` VALUES (14787164048662, 'tony', 'tony', '$2a$10$MaFiiwNV45glvPXYVlRt5.kMatuYD/mLzSAirVwZThZnKU.CjxcLC', '0', '0', NULL, NULL, '0', '浙江宁波', 'Never forget why you started!', 'https://img1.baidu.com/it/u=1817915659,804553856&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_user` VALUES (1578603364453953538, 'rootjx', '泰迪', '$2a$10$f/ezuRT7RKuXkgCzlfIONOVy2Pr/SsJLKzq5yCjJX99PbgzqAPYM2', '0', '0', '1048341117@qq.com', NULL, '0', '浙江宁波', 'Never forget why you started!', 'http://rir6wdlzn.hd-bkt.clouddn.com/2022/10/14/e6cbc23109fb48f69bc26aec04ddfb1c.jpg', NULL, '2022-10-08 12:29:06', NULL, '2022-10-14 18:58:54', 0);
INSERT INTO `sys_user` VALUES (1579691106277396482, 'szh', 'szh', '$2a$10$osnK6crabirQl.tTHXjUBO69kS8O7OrFWBC1YfRFmxbCuQ6OppwtG', '0', '0', '3032388097@qq.com', NULL, '0', '浙江宁波', 'Never forget why you started!', 'http://rir6wdlzn.hd-bkt.clouddn.com/2022/10/15/4f5ed2aaaa454e659cb45d3c80fc88a1.jpg', NULL, '2022-10-11 12:31:24', NULL, '2022-10-15 16:17:22', 0);

-- ----------------------------
-- Table structure for sys_user_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role`  (
  `user_id` bigint(20) NOT NULL COMMENT '用户ID',
  `role_id` bigint(20) NOT NULL COMMENT '角色ID',
  PRIMARY KEY (`user_id`, `role_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户和角色关联表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_user_role
-- ----------------------------
INSERT INTO `sys_user_role` VALUES (1, 1);
INSERT INTO `sys_user_role` VALUES (2, 2);
INSERT INTO `sys_user_role` VALUES (5, 2);
INSERT INTO `sys_user_role` VALUES (6, 12);

SET FOREIGN_KEY_CHECKS = 1;
